
why go?


1.php python ruby系列


这些都是动态语言，性能太慢，一旦代码规模庞大就很难控制代码质量



2.java scala c#系列

这类语言性能强大内库完善，带着一个高效的gc(内存垃圾回收机制)

缺点，带一个硕大的运行时，导致各种资源消耗
java语法的繁琐


3. c/c++系列

这一类语言偏偏对处理字符串比较弱，没有gc.很难写出稳定性强的web程序


而且c++的编译性能很烂，你开一个大型项目,随便make一下，一天就过去了


go环境的安装

go run表示直接编译go语言并执行应用程序

import fmt 告诉编译器使用fmt包(的函数，或其他元素)
fmt包实现了格式化IO(输入、输出)的函数


func main()是程序开始执行的函数。main函数是每一个可执行程序所必须包含的，
一般来说都是在启动后第一个执行的函数(如果有init()函数则会先执行该函数)

注释，fmt.Println()可以将字符串输出到控制台，并在最后自动增加换行字符\n

fmt.Print("hello,world!\n")

Print,Println这两个函数也支持使用变量


fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量arr输出到控制台

1. 配置Vim-go 语法高亮
(1) 下载Vundle.vim(vim 安装插件的工具)
(2) 配置。在~/.vmrc粘贴如下代码即可
(3) 安装vim-go插件
(4) 之后打开一个go文件

2. 配置go语法自动补齐


linux配置vim插件参考

基础语法

1.分隔符

在go程序中，一行代表一个语句结束。每个语句不错需要分号结尾
这些工作都将由go编译器自动完成。


如果打算将多个语句写在同一行，它们则必须使用;人为区分，在实际开发中不要专业

2. 注释

注释不会被编译，每一个包应该有相关注释

//
/**/


3. 标识符


标识符用来命名变量，类型等程序实体。一个标识符实际上就是一个或多个字母
(A~Z,a~z)数字(0~9),下划线_组成的序列，但是第一个字符必须是字母或下划线
而不能是数字

无效的 标识符

1.以数字开头
2.Go语言的关键字
3.运算符是不允许的

4. 关键字(25个)


break,default,func,interface,select
case,defer,go,map,struct
chan,else,goto,package,switch
const,fallthrough,if,range,type
continue,for,import,return ,var

go语言还有36个预定义标识符


append,bool,byte,cap,close,complex,complex64
copy,false,float32,float64,imag,int,int8
int32,int64,iota,len,make,new,nil
print,println,real,recover,string,true,uint

程序一般由关键字，常量，变量，运算符，类型和函数组成


程序汇总可能会使用到这些分隔符：括号(),中括号[],大括号{}


程序中可能会使用到这些标点符号:. 、;...

数据类型

在go编程语言汇总，数据类型用于声明函数和变量

数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要
用大数据的时候才需要申请大内存，就可以充分利用内存


go语言按类别有以下几种数据类型


1. 布尔型 

布尔型的值只可以是常量true或false

var b bool = true


2. 整型


整型 int和浮点型float,go语言支持整型和浮点型数字，并且原生支持复数，
其中位的运算采用补码

3.字符串类型


字符串就是一串固定长度的字符连接起来的字符序列。go的字符串是由单个字节
连接起来的。go语言的字符串的字节使用UTF-8编码标识Unicode文本

4.派生类型
包括

a. 指针类型(Pointer)
b. 数组类型
c. 结构化类型(struct)
d. Channel类型
e. 函数类型
f. 切片类型
g. 接口类型(interface)
h. Map 类型


整型

Go也有基于架构的类型，例如：int,uint和uintptr


uint8

无符号8位整型(0~255)

uint16,uint32,uint64,int8,int16,int64,

常用整型
byte 类似 uint8
rune 类似int32

uint  32或64位

int  与uint 一样大小

uintptr

无符号整型，用于存放一个指针

浮点型

float32, float64,complex64,complex128,

变量

声明变量的一般形式是使用var 关键字


变量声明

第一种，指定变量类型，声明后若不赋值，使用默认值0

var v_name v_type

v_name = value

第二种，根据值自行判定变量类型

var v_name  =value


第三种，省略var ,注意:= 左侧的变量不应该是已经声明的，否则会导致编译错误

v_name := value

// 例如

var a int =10
var b =10
c := 10

多变量声明

值变量和引用类型

所有像int,float,bool,string这些节本类都属于值类型，私用这些类型的变量
直接指向存在内存中的值：

当使用等号 = 将一个变量的值赋给另一个变量时，如: j= i,实际上是在内存
将i的值进行了拷贝

可以通过&i来获取变量i的内存地址，例如，0xd432342(每次的地址都可能不一样)
值类型的变量的遏制存储在栈中

内存地址会根据机器的不同而有所不同，甚至相同的程序在不同的机器上执行后也会
有很不同的内存地址。因为每台机器可能有不同的存储器布局，并且位置分配也可能不同


更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存

一个引用类型的变量r1存储的是r1的值所在的内存地址(数字)，或内存地址中
第一个字所在的位置


这个内存你地址称为指针，这个指针实际上也被存在另外的而某一个字中

同一个引用类型的指针指向的多个字可以是在连续的内存地址中(内存布局是连续的)，
这也是计算效率最高的一种存储形式；也可以将这些字分散存放在内存中，
每个字都指示了下一个字所在的内存地址


当使用赋值语句r2=r1时，只有引用(地址)被复制


如果r1的值被改变了，那么这个值的所有引用都会指向被修改后的内容，在这个
例子中，r2也会受到影响

常量

常量是一个简单值的标识符，在程序运行时，不会被修改的量

产量中数据类型只可以是布尔型，数字型(整数型，浮点型和复数)和字符串型


常量的定义格式

const identifier [type] = value

可以省略类型说明符[type],因为编译器可以根据变量的值来推断其类型

显式类型定义：

const b string = "abc"

隐式类型定义

const b = "abc"



常量还可以用作枚举：

const (
	Unknown = 0
	Female =1
	Male =2
)

数字0,1,2分别代表未知性别，女性，男性


常量可以用len(),cap(),unsafe.Sizeof()常量计算表达式的值。
常量表达式中，函数必须是内置函数，否则编译不过；

字符串类型在go里面是个结构，包含指向底层数组的指针和长度，这两部分每部分都是
8个字节，所以字符串类型大小为16个字节


优雅的常量iota

有些概念有名字，并且有时候我们关注这些名字，甚至(特别)是在我们代码中

const(
	CCVisa = "Visa"
	CCMasterCard = "MasterCard"
)


在其他时候，我们仅仅关注能把一个东西与其他的作区分。
有时候一件事没有本质上的意义。比如，我们在一个数据库表中存储产品，
我们可以不想以string存储他们的分类。我们不关注这个分类是怎样命名的，
此外，该名字在市场上一直在变化

我们仅仅关注如何区分他们


自增长

在golang中，一个方面的习惯就是使用iota标识符，它简化了常量用于
增长数字的定义，

const (
	CateGoryBooks = iota // 0
	CateGoryHealth  // 1
	CateGoryClothing //2
)

自定义类型

自增长常量经常包含一个自定义类型，允许你依靠编译器


type Stereotype int // 这是一个自定义类型Steretype　实际上就是 int类型


const (
	TypicalNoob Stereotype = iota //0
	TypicalHipster // 1
	TypicalUnixWizard // 2
	TypicalStartupFounder // 3
)


如果一个函数以int 作为它的参数而不是Steretype,如果你给它传递一个Steretype,
它将在编译器期出现问题


相反也成立。给一个函数以Stereotype作为参数，你不能给它传递int

尽管如此，你可以传递一个数值常量，然后它却能够工作

这是因为常量在go中是弱类型直到它使用在一个严格的上下文环境中


另外，可以使用下划线跳过不想要的值

type AudioOutput int

const (
	OutMute AudioOutput = iota // 0
	OutMono // 1
	OutStereo // 2
	_
	_	
	OutSurround  // 5
)

iota和表达式

iota还可以做很多事情，不仅仅是increment.
iota总是用于increment,但它可以用于表达式，在常量中的存储结果值

type Allergen int

const (
	IgEggs Allergen = 1 << iota // 1 << 0 which is 00000001
	IgChocolate // 1 << 1 which is 00000010
	IgNuts  // 1 << 2 which is 00000100
	IgStrawberries // 1<<3 which is 00001000
	IgShellfish  // 1 << 4 which is 00010000
)


这个工作是因为当你在一个const组中仅仅有一个标识符在一行的时候，它将使用
增长的iota取得前面的表达式并且再运用它

在go语言的spec中，这就是所谓的隐性重复最后一个非空的表达式列表。


fmt.Println(IgEggs|IgChocolate|IgShellfish)

type ByteSize float64

const(
	_ = iota //ignore first value b y assigning to blank idenfier
	KB ByteSize = 1 <<(10*iota) // 1<< (10*1)
	MB  // 1 << (10*2)
	GB // 1 << (10*3)
	TB // 1 << (10*4)
	PB // 1<<(10*5) 
)

当你把两个常量定义在一行的时候会发生什么？


Banana的值是什么？2还是3?　Durian的值又是？

const(

	Apple,Banana = iota+1,iota+2
	Cherimoya,Durian
	Elderberry,Fig
)

在下一行增长，而不是立即取得它的引用


Apple:1
Banana:2
Cherimoya:2
Durian:3
Elderberry:3
Fig:4

运算符

运算符用于在程序运行时执行数学或逻辑运算

GO语言内置的运算符：
1.算术运算符　　
2. 关系运算符
3.逻辑运算符
4.位运算符
5.赋值运算符
6.其他运算符

算术运算符

+  -   *  /   %  ++  --


关系运算符


== !=  >  <  >= <=  

逻辑运算符


&&  \   ! 

位运算

位运算符对整数在内存中的二进制位进行操作

& \ ^ << >>

赋值运算符

= -= += *= /= %= <<= >>= &= ^= \

其他运算愤怒

&  返回变量存储地址，&a;将给出变量的实际地址

* 指针变量　　*a;是一个指针变量


运算符优先级


^!  
*/%<<>>&&^
+=\
== != <<= >=>
<-

&&

条件语句 

条件语句需要开发这指定一个或多个条件，并通过测试条件是否为true来决定
是否执行指定语句，

if...else语句

switch 语句　用于基于不同条件执行不同动作，每一个case分支都是唯一的，
从上至下逐一测试，直到匹配为止

switch语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加break

switch 语句还可以被用于type-switch来判断某个ingerface变量中
实际存储的变量类型

Type Switch语句

switch　x.(type){
	case type:
		statement(s);
	case type:
		statement(s);
	// 可以定义任意个数的case
	default：
		statement(s);
}

语言for循环　

for循环是一个循环控制结构，可以执行指定次数的循环


语法


go语言的For循环有三种形式，只有其中的一种使用分号

和C语言的for一样


for init; condiiton;post{} 和c的while一样：

for condition{}


和c的for(;;) 一样


for {}

init :一般为赋值表达式，给控制变量赋予初值；
condition:关系表达式或逻辑表达式，循环控制条件；
post：一般为赋值表达式，给控制变量增量或减量


for循环的range格式可以对slice,map,数组，字符串等进行迭代循环


for key,value := range oldMap{
	newMap[key] = value
}


循环控制语句


循环控制语句可以控制循环体内语句的执行过程


go语言支持一下几种循环控制语句：

控制语句　　　描述

break  经常用于中断当前for循环或跳出switch语句
continue 跳出当前循环的剩余语句，然后继续进行下一轮循环

goto　　将控制转移到被标记的而语句


goto语句

函数


函数是基本的代码块，用于执行一个任务

Go语言最少有个main()函数

可以通过函数来换分不同功能，逻辑上每个函数执行的是指定的任务


函数声明高速了编译器函数的名称，返回类型和参数


go语言标准库提供了多种可动用的内置的函数。例如，
len()函数可以接受不同类型采纳数并返回该类型的长度
如果我们传入的是字符串则返回字符串的铲毒，
如果传入的是数组，则返回数组中包含的函数个数



函数定义


Go语言函数定义格式如下


func function_name ([parameter list]) [return_types]
{
	函数体
}


函数定义解析

func:函数由func开始声明

function_name:函数名称，函数名和参数列表一起构成了函数签名

parameter list:参数列表，参数就像一个占位符，但函数被调用时，你可以
将值传递给参数，这个值被称为实际参数。
参数列表指定的是参数类型，顺序，及参数个数。
参数是可选的，也就是说函数也可以不包含采纳数


return_types:返回类型，函数返回一列值。
return_types是该列值的数据类型。有些功能不需要返回值，这种情况下
return_types不是必须的


函数体：　函数定义的代码集合

以下实例为max()函数的代码，该函数传入两个整型参数num1和num2,并返回
这两个参数的最大值：


//函数返回两个数的最大值

func max(num1,num2 int) int{
	//声明局部变量
	var result int
	if(num1 > num2) {
		result =num1
} else{
	result = num2
}	return result
}


函数调用


当创建函数时，定义函数需要做什么，通过调用改函数来执行指定任务

调用函数，向函数传递参数，并返回值


例子中，在main()函数中调用max()函数



函数返回多个值


go函数可以返回多个值

函数参数

函数如果使用参数，该变量可称为函数的形参

形参就像定义在函数体内的局部变量

调用函数，可以通过两种方式传递参数(值传递和引用传递)


值传递：

值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中
如果对参数进行修改，将不会影响到实际参数


默认情况下，Go语言使用的是值传递，即在调用过程中不会影响到实际参数。

以下定义了swap()函数：

//定义相互交换值的函数


func swap(x,y int)int{
	var temp int
	temp =x //　保存x的值
	x= y //将ｙ值赋给x
	y =temp //将temp　值赋给y
	return temp;
}



下面使用值传递来调用swap()函数

引用传递　是指在调用函数时将实际采纳数的地址传递到函数中，那么在函数中
对采纳数所进行的修改，将影响到实际参数


引用传递指针参数传递到函数内，以下是交换函数swap()使用了引用传递

//定义交换值函数


func swap(x *int,y *int){
	var temp int
	temp = *x // 保持x地址上的值
	*x =*y  //将y 值赋给x
	*y = temp //将temp 值赋给y

}

函数作为值


go语言可以很灵活的创建函数，并作为值使用。
以下实例中我们在定义的函数中初始化一个变量，该函数仅仅是
为了使用内置函数math.sqrt()

闭包


go语言支持匿名函数，可以作为闭包。匿名函数是一个"内联"语句或表达式
匿名函数的优越性在于可以直接床架你函数内的变量，不必声明

下面实例，我们创建了函数getSequence(),返回另一个函数，该函数的
目的是在闭包中递增i变量

go语言变量作用域

作用域为已声明标识符所表示的常量，类型，变量，函数或包在源代码中的作用范围

go语言中变量可以在三个地方声明：

1.函数内定义的变量称为局部变量
2. 函数外定义的变量称为全局变量
３．函数定义中的变量称为形式参数


局部变量

在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，
参数和返回值变量也是局部变量


下面实例中main()函数使用了局部变量a,b,c:


main函数和init函数

g里面有两个保留函数
init函数　，能够应用于所有的package
main函数 , 只能应用于package　main

这两个函数在定义时不能有任何的参数和返回值


用于最好在一个package中每个文件只写一个init函数


go程序会自动调用init()和main().所以不需要在任何地方调用
这两个函数。每个package中的init函数都是可选的，
但package main就必须包含一个main函数

程序的初始化和执行都起始与main包。
如果main包还导入了其他的包，那么就会在编译时将它们依次导入。

有时一个包会被多个包同时导入，那么它只会被导入一次

当一个包被导入时，如果该包还导入了其他的包，那么会先将其他
包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行init函数
(如果有的话)，以此类推，等所有被导入的包都加载完毕了，就会开始
对main包中的包级常量和变量进行初始化，然后执行main包中的init函数(如果存在的话)
最后执行main函数


指针

go语言中指针很容易学习，go语言中使用指针可以更简单的执行一些任务

变量是一种使用方便的占位符，用于引用计算机内存地址

go语言的取地址符是& ,放到一个变量前使用就会返回相应变量的内存地址


下面延时变量在内存中地址：

一个指针变量可以指向任何一个值的内存地址
它指向那个值的内存地址。类似于变量和常量，在使用指针前你需要声明指针。
指针声明格式如下：

var ip *int //指向整型
var fp *float32 //指向浮点型


如何使用指针

指针使用流程

１．定义指针变量
2. 为指针变量赋值
3. 访问指针变量中指向地址的值


在指针类型前加上*号(前缀)　来获取指针所指向的内容

go空指针

当一个指针被定义后没有分配到任何变量时，它的值为nil

nil指针也称为空指针


nil在概念上和其他语言的null,None,nil,NULL一样，都指代零值或空值


一个指针变量通常缩写为ptr


空指针判断


if(ptr != nil) // ptr不是空指针
if(ptr == nil) // ptr是空指针


指针数组


有一种情况，我们可能需要保存数组，这样就需要使用到指针


一下声明了整型指针数组

var ptr [MAX]*int;

ptr为整型指针数组。因此每个元素都指向了一个值。
以下实例的三个整数将存储在指针数组中：


声明数组

go语言数组声明需要指定元素类型及元素个数


var variable_name[SIZE] variable_type



以上为一维数组的定义方式。数组长度必须是整数且大于.
例如以下定义了数组balance长度为10类型为float32

初始化数组

var balance = [5]float32{1000.0,2.0,3.4,7.0,50.0}


初始化数组中{}中的元素个数不能大于[]中的数字

如果忽略[]中的数字不设置数组大小，go语言会根据元素的个数来设置数组的大小

var balance = [...]float32{1000.0,2.0,3.4,7.0,50.0}


　虽然没有设置数组的小
balance[4] = 50.0

数组元素可以通过索引(位置)来读取(或修改)，索引从0开始，第一个元素索引
为0,第二个索引为1


数组元素可以通过索引(位置)来读取。格式为数组名为中括号，中括号为索引的值。


float32 salary = balance[9]

以上实例读取了数组balance第10个元素的值


一下显示数组完整操作(声明，赋值，访问)的实例

多维数组传参


结构体

go语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型

结构体是由一系列具有相同类型或不同类型的数据构成的数据结合


结构体表示一项记录，比如保存图书馆的书籍记录，每本书有以下属性：

type struct_variable_type struct{
	member definition;
		member definition;
}



一旦定义了结构体类型，它就能用于变量的声明，

variable_name := struct_variable_type{value1,value2,...valuen}


访问结构体成员

如果要访问结构体成员，需要使用点好(.) 操作符，格式为"结构体.成员名"


结构体类型变量使用struct关键字定义



结构体指针

可以定义指向结构体的指针类似与其他指针变量，

var struct_pointer *Books

以上定义的指针变量可以存储结构体变的地址。查看结构体变量地址，可以将&符号
放置与结构体变量前


struct_pointer =&Book1


使用结构体指针访问结构体成员，使用"."操作符

struct_pointer.title


下面使用结构体指针重写以上实例


切片(Slice)


go语言切片是对数据的抽象


go数组的长度不可改变，在特定场景中这样的集合就不太适用，
go中提供了一种灵活，功能强悍的内置类型切片("动态数组")，
与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的客容量增大


定义切片

可以声明一个未指定大小的数组来定义切片：


var identifier []type


切片不需要说明长度

或使用make()函数来创建切片

var slice1 []type = make([]type,len)


也可以简写为

slice1 := make([]type,len)


也可以指定容量，其中capacity为可选参数


make([]T,length,capacity)


这里len是数组的长度并且也是切片的初始长度



切片初始化

s := [] int{1,2,3}


直接初始化切片，[]表示是切片类型,{1,2,3}初始化依次是1,2,3其cap=len=3


s := arr[:]


初始化切片s,是数组arr的引用

s := arr[startIndex:endIndex]


将arr中从下标startIndex到endIndex-1下的元素创建一个新的切片

s := arr[startIndex:]


缺省endIndex时将表示一直到arr的最后一个元素


s := arr[:endIndex]


缺省startIndex时将表示从arr的第一个元素开始


s1 := s[startIndex:endIndex]

通过切片s初始话切片s1


s :=make([]int,len,cap)


通过内置函数make()初始化切片s,[]int标识为其元素类型为int的切片



len()和cap()函数

切片是可索引的，并且可以由len()方法获取长度


切片提供了计算容量的方法cap()可以测量切片最长可以达到多超



空(nil)切片

一个切片在未初始化之前默认为nil，长度为0

切片截取


可以通过设置下限及上限来设置截取切片[lower-bound:upper-bound]



append()和copy()函数


如果想增加切片的容量，必须创建一个新的更大的切片并吧原分片的内容都拷贝过来

下面代码描述了从拷贝切片的copy方法和向切片追加新元素的append方法

上面代码附加的参数p,叫做方法的接收器(receiver),

早期的面向对象语言留下的遗产将调用一个方法称为”向一个对象发送消息“


在go语言中，我们并不会像其它语言那样用this或self作为接收器；
我们可以任意的选择接收器的名字

由于接收器的名字经常会被使用到，所以保持其在方法键传递时的一致性和
简短型是必要的。

建议，可以使用其类型的第一个字母，比如使用了Point的首字母p



可以看到，上面的两个函数调用都是Distance,但是却没有发生冲突。
第一个Distance的调用实际上用的是包级别的函数main.Distance,
而第二个则是使用刚刚声明的Point,调用的是Point类
下　声明的Point.Distance方法


这种p.Distance的表达式叫做选择器，因为他会选择合适的对应p这个对象
的Distance方法来执行。选择器也会被用来选择一个struct类型的
字段，比如p.X
由于方法和字段都是在同一命名空间，所以如果我们这里声明一个X方法的话

编译器会报错，因为在调用p.X时会有歧义(

因为每种类型都有其方法的命名空间，我们在用Distance这个名字的时候，
不同的Distance调用指向了不同类型里的Distance方法

下面来定义一个Path类型，这个Path代表一个线段的结合，并且也给
这个Path定义一个叫做Distance的方法。


go 基于指针对象的方法

方法表达式

和方法"值"相关的还有方法表达式。当调用一个普通的函数相比，我们必须要用选择器(p.Distance)语法来指定方法的接收器

当T是一个类型时，方法表达式可能会写作T.f或(*T).f,会返回一个函数"值"，这种函数会将其第一个参数用作接收器，
所以可以用通常(或不写选择器)的方式对其进行调用：

// 这个Distance实际上是指定了Point对象为接收器的一个方法func (p Point) Distance()

//但通过Point.Distance 得到的函数需要比实际的Distance方法多一个参数

//即其需要用第一个额外参数指定接收器，后面排列Distance方法的参数

//看起来本书中函数和方法的区分有没有接收器，而不像其他语言那样是指没有返回值


当你决定一个变量来决定调用同一类型的哪个函数时，方法表表达式就是很有用了

可以根据选择来调用接收器各不相同的方法。

变量op代表Point类型的addition或substraction方法，PathTransalteBy方法会为其Path数组中的每一个Point来调用对应的方法：


封装

package main
import "fmt"

type data struct {
	val int 
}


//封装的时候一定要是基于指针类型的方法，否则不是同一个对象

func (p_data* data) set(num int) {
	p_data.val = num
}

func (p_data* data)show(){
	fmt.Println(p_data.val)
}


func main(){
	p_data := &data{4}
	p_data.set(5)
	p_data.show()

}


继承

package main

import "fmt"


type parent struct {
	val int
}

type child struct {
	parent
	num int
}

func main() {
	var c child
	c = child{parent{1},2}
	fmt.Println(c.num)
	fmt.Println(c.val)
}


多态


package main

import "fmt"

type act interface {
	write()
}

type xiaoming struct {
	}

type xiaomfang struct {
	}
func (xm *xiaoming) write(){
	fmt.Println("xiaoming write")
}

func (xf *xiaofang) write(){
	fmt.Println("xiaofang write")
}


func main(){
	var W act;
	xm := xiaoming{}
	xf := xiaofang{}

	W = & xm
	W.Write()
	W = &xf
	W.Write()
}


接口

接口类型是对其它类型行为的抽象和概括：
因为接口类型不会和特定的实现细节绑定在一起，通过这种抽象的方式我们可以让我们的函数更加灵活和更具有适应能力

很多面向对象的语言都有相似的接口概念，但go语言中接口类型的独特指出在于它是满足隐式实现的。
我们没有必要对于给定的具体类型定义所有满足的接口类型；
简单地拥有一些必需的方法即可

这种设计可以让你创建一个新的接口类型满足已经存在的具体类型却不会去改变这些类型的定义
当我们使用的类型来自于不受我们控制对的包时这种设计尤其有用


go语言提供了另外一种数据类型即接口，它吧所有的具有共性的方法定义在一起，任何其他类型会主要实现了这些方法就是
实现了这个接口



//定义接口


type interface_name interface {
	method_name1 [return_type]

}

//定义结构体

type struct_name struct {
	// variables
}


// 实现接口方法

func (struct_name_variable struct_name ) method_name1()[return_type] {
	//方法实现
}


func (struct_name_variable struct_name) method_namen()[return_type]{
	//方法实现
}



2. 配合switch使用

var t interface{}
t = functionOfSomeType()
switch t := t.(type) {
default:
	fmt.Println("unexpected type %T",t) // %T prints whate ver type t has
case bool:
	fmt.Println("boolean %t\n",t) // t has type bool
case int:
	fmt.Println("integer %d\n",t) // t has type int
case *bool:
	fmt.Println("pointer to boolean %t\n",*t) // t has type *bool
case *int:
	fmt.Println("point to integer %d\n",t) // t has type *int
}


func sqlQuote(x interface{}) string{
	if x==nil {
		return "NULL"
}	else if _,ok := x.(int); ok{
	return fmt.Sprintf("%d",x)
} else if _, ok := x.(uint); ok {
} else if b, ok := x.(bool); ok{
	if b {
		return "TRUE"
}
	return "FALSE"
} else if s,ok := x.(string); ok{
	return sqlQuoteString(s) // (not shown)
} else{
	panic(fmt.Sprintf("unexpected type %T %v",x,x))
}
}

文件操作

相关api介绍

建立File内存地址api

//返回File的内存地址，错误信息，通过os库调用

func Create(name string) (file *File,err Error)

//返回文件的内存地址，通过os库调用

func NewFile(fd int,name string) *File

打开文件api


//返回File的内存地址，错误信息，通过os库调用

func Open(name string)(file *File,err Error)

//返回File的内存地址，错误信息，通过os库调用
func OpenFile(name string,flag int,perm unit32)(file *File,err Error)

写文件api


//写入一个slice,返回写的个数，错误信息，通过File的内存地址调用

func (file *File)Write(b []byte)(n int,err,Error)

//从slice的某个位置开始写入，返回写的个数，错误信息，通过File的内存地址调用

func (file *File)WriteAt(b []byte,off int64)(n int ,err Error)


//写入一个字符串，返回写的个数，错误信息，通过File的内存地址调用

func (file *File) WriteString(s string)(ret int,err Error)


读文件api

//读取一个slice,返回读的个数，错误嘻嘻，通过File的内存地址滴啊用

func (file *File) Read(b []byte)(n int,err Error)

//从slice的某个位置开始读取，返回读到的个数，错误信息，通过File的内存地址调用

func (file *File) ReadAt(b []byte,off int64)(n int,err Error)


删除文件api

// 传入文件的路径来删除文件，返回错误个数


func Remove(name string)Error


写文件的实例代码

读文件的实例代码
p134

