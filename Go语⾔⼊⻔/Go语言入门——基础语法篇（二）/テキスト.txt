Go语言入门——基础语法篇（二）

基础语法

注释
变量
变量声明
初始化
多变量赋值

常量
枚举

数据类型
字符
字符串
数组
切片
从数组创建切片
直接创建切片
切片的操作
字典，映射

分支与循环
if分支
switch分支
goto跳转
循环


函数


定义函数
函数的不定参
匿名函数与闭包
函数作为参数传递

go语言函数使用小细节


包
自定义包
包的几种导入方式
包的初始化函数
go语言的入口

go，其声明变量时，类型定义在变量名之后

变量申请


使用关键字var，并将类型放在变量名之后

我们直到在c语言中，变量声明必须初始化再使用，否则变量会带有随机的值
go语言的编译器则会在声明变量时对变量做零值初始化，这解决了c语言的缺陷

字符串的零值是一个空字符串"",
数组则是已经开辟了空间，且每个元素的值都是零值，
指针的零值则是0
这里v4变量的类型是切片，实际就是一个指针


同时声明多个变量

//不同类型

var (
	v1 int
	v2 string
)

//相同类型
var i,j,k int

初始化
使用:= 操作符，可以做短变量声明


var v1 int= 10//声明变量的同时初始化
var v2 = 10 //让编译器自动推导类型

v3 := 10 //省略关键字var和类型，让其自动推导而理性


多变量赋值
//先声明，再赋值

var i,j,k int

i,j,k = 2,3,4

//声明的同时赋值，注意使用":="操作符


l,m,n := 7,8,9

常量　

使用const关键字声明常量，声明常量时也可以省略类型定义，如果
想要明确具体类型，提供代码可读性，也可以显式指定类型

const Pi float64 = 3.14

const zero =0.0 //浮点常量

const (
	size int64 = 1024
	eof = -1 // 整型常量
)


// u = 0.0 ,v =3.0 常量的多重赋值

const u,v float32 = 0,3

// a= 3,b =4,c ="foo" 无类型整型和字符串常量、

const a,b,c  =3,4,"foo"


//常量定义的右值可以是一个编译期运算的常量表达式

const mask = 1 << 3

枚举


枚举指一系列相关的常量，比如下面关于一个星期中每天的定义。
同go语言的其他符号一样，以大写字母开头的常量在包外可见

//go 语言中实际上是用整型常量替代枚举


const (
	Sunday = iota
	Monday 
	T	
	W
	T
	F
	S
)

字符

go语言中有两种字符类型，分别是byte,rune,
byte类型就是相当于c语言中的char,表示的是单字节字符，如ascii码，
如果是中文这种，单字节是无法表示的，
就需要多个字节一起来表示

而rune类型则是专门用来表示Unicode字符的，它相当于C语言中的所谓宽字符
即wchar,单个rune就能表示一个中文

字符串
go语言的源代码默认的编码方式就是utf8,这与python一样

我们可以在源代码中直接书写中文字面量

声明并初始化字符串变量

var str1 string= "这是中文"
var str2 string="are you ok?"

//字符串拼接

str3 := str1+str2

go语言吸收了python中字符串切分的语法
注意，字符串切分返回的依然是string类型

不要对中文字符串直接切分操作，会返回乱码

这是因为go语言默认编码是utf8,这是一种多字节编码
通常它使用3个byte来表示要给中文
而字符串切片的就是byte,中文直接切分破坏了每三个byte一组
的完整性。如需对中文字符串切分，必须先强制转换为[]rune类型

go语言中还支持一种反引号括起来的字符串，该字符串还可以包含多行和特殊字符，
双引号括起来的字符串遇到特殊字符需转义，则反引号则不需要

实际上就等同于python中的三引号括起来的字符串，这是一种原始字符串，它会
包含字面量中的格式，即换行和特殊字符

数组

数组是一个具有相同数据类型的元素组成的固定长度和有序集合。数组中包含的每个数据
称为数组元素，包含的元素个数称为数组长度

在go语言中，数组是值类型，长度是类型的组成部分，也就是说[10]int,[20]int是
完全不同的两种数组类型


需要注意，数组作为参数传递时，是值传递，这

所谓值传递即传递的是原始数组的一个复制品，操作复制品，不会改变原始数组，除非是传入数组的指针

切片

数组的长度在定义之后无法再次修改，且数组是值类型，每次传递都产生一份备份，
这是数组的缺陷，而切片正好弥补了数组的这个不足

实际上,go的切片，就是一个动态数组，类似python的List,
可以自动增长

从数组创建切片

切分与数组的区分

var myArray[10]int
var mySlice[]int

数组的中括号中有数字指明数组长度，而切片是没有指定数字的。

go语言汇总，声明数组是不能　省略数组长度的，如果省略，则声明的是切片，不是数组

go语言可以使用myArray[first:last]这样的方式来基于数组生成一个数组切片，
当[]中first或last为0时，可以省略。其中索引是从0开始的，
且包含first索引对应的元素，不包含last索引对应的元素


//基于myArray的所有元素创建数组切片
mySlice = myArray[:]


//基于myArray的前５个元素创建数组切片

mySlice =myArray[:5]


切片处理跟python一样


直接创建切片

使用内置函数make()可以灵活地创建数组切片

//创建一个初始元素个数为5的数组切片，元素初始值为0

mySlice1 := make([]int,5)

p11
