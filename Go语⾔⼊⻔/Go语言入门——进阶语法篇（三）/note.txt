go语言入门，进阶语法篇

进阶语法

指针
基本指针
高级指针
指针总结

面向对象
概述
对象
类

结构体
定义与初始化

添加方法


方法的注意事项
类型别名与类型定义的区别

工厂函数

接口
接口声明
接口实现
空接口
类型断言与类型查询
接口总结

面向对象三大特性
封装
继承
多态

进阶语法

基本指针

go语言基本指针不能直接进行指针运算



go语言基本指针用法与c语言几乎相同

&取地址符
* 解引用运算符


值类型，引用类型，指针类型


指针是指一个保存内存地址内存地址的变量；
值是指的数据本身
值类型表示和这个变量代表的就是数据本身，而不是数据的内存地址。
go中指的引用类型，是指特定的几个类型，分别是slice,
map,chan,interface，通常它们在内部封装了真实的指针，
因此这些类型并不是值类型，称为引用类型。

人们习惯于把指针指向真实数据的内存空间这一现象称为引用
即表示对值所在的内存空间的一种引用

高级指针

为了使go语言的指针也能像c语言那样直接操作内存，go提供了
unsafe包，unsafe包主要提供了两种类型，三个函数

go语言不建议使用指针运算


指针总结

１．go指针主要用于传递结构体地址，防止不必要的内存拷贝，提升性能
２．go语言使用nil表示空指针
３．go无需手动管理堆内存，go编译器会基于逃逸分析来确定
内存分配在堆上还是栈上，因此无需对指针进行释放，
堆上的内存由GC处理

c是面向过程的

面向对象核心的载体是类和对象

go语言使用结构体来模拟类

结构体

go语言的结构体类似C语言的结构体，go语言使用结构体来模拟
类，因此，我们可以简单的将go的结构体看做一个类，
通过这个结构体生成的也是该类的对象


定义与初始化

//定义学生结构体，即类似学生类


type Student struct{
	id uint64
	name string
	age int

	score float64
}

定义结构体的格式，定义结构体属性时，不要使用var关键字

type 结构体 struct{
	字段(属性)}


在go语言中，未进行显式初始化的变量都会被初始化为该类型的零值，
结构体的属性字段也是一样

在c语言中，结构体指针调用成员变量时，使用->操作符，
而go语言中都是使用.操作符，go语言会对结构体指针做自动转换再访问成员　

// 结构体指针

pStu := &Student{}

pStu.name = "John"

//等价于以下调用。go会先解引用然后再访问成员

(*pStu).name = "John"


添加方法

方法就是一种特殊的函数，对应到面向对象类的概念中，
也就是所谓的行为。在go语言中，
方法和函数的最显著的区别是多了一个接收者的参数

定义结构体方法格式

func(接收者)方法名(参数列表)返回值列表{}

方法与函数唯一的区别是多了接收者，它位于关键字func和方法名之间，它
的类型就是需要添加方法的结构类型，该参数通常使用结构体指针，
参数名任意，不过推荐使用this或self,
这里的接收者的作用相当于c++中的this指针，或python中的self


方法的注意事项

在go语言中，不仅仅是结构体有方法，所有自定义类型都可以添加方法

//将int　声明为新类型Integer

类型别名与类型定义的区别

在go1.9中引入了新特性类型别名。
在此之前，type关键字只能用于定义新类型，之后，可以用于定义类型别名


//定义新类型
type 新类型名　原类型名

//定义类型别名

type 类型别名=原类型名


类型别名与元类型是完全等同的，而定义的新类型与原类型是不同的，
因此将原类型直接赋值给新类型会报错，相应的，定义新类型都可以绑定方法，
而使用类型别名则不一定，


工厂函数

结构体是没有所谓的构造方法的，因此说go语言的面向对象不是纯粹的
面向对象。通常的，可以创建一个名为NewXXX的工厂函数用来专门
创建结构体的实例对象

func NewPoint(x,y float64) *Point{
	return &Point{x,y}
}

接口

接口实质上是一种通用的标准或协议，它规范了某种行为特征，而规范
接口的好处在于可以即插即用。
go语言可以用来定义一组不用实现的方法。如java中的抽象方法，
c++中的虚函数，go的接口不需要显式的实现。

在go语言中，正是使用接口来实现解耦合

接口声明

格式

type 接口名　interface{方法声明}


注意，接口中的方法声明不需要func关键字，不需要声明接收者
也不需要方法体(不需要花括号)，其他的和普通的函数声明一样

go中的接口实现是一种隐式实现，即某个自定义类型中包含全部的
接口方法的实现，则这个自定义类型自动实现该接口。
除了结构体可以实现接口，通过type关键字创建自定义类型也可以实现接口
另外的，一个自定义类型是可以是实现多个接口的，只要实现了多个接口的
所有方法，它就会自动实现这些接口


空接口

在面向对象编程中，有超类的概念，即所有类都默认继承某个类型，
比如python中的object，而go语言中，也有一个所有类型都默认
实现的接口－－－－空接口。go语言目前没有泛型的概念，
通常就需要使用空接口来实现类似泛型的功能
空接口是一个匿名的接口，它不包含任何方法

interface{}

go语言中的数组和切片只能存放相同的数据类型，python的列表
可以存放任意类型的数据的，如何让数组方法不同的数据类型的元素

借助空接口，声明一个空接口类型的数组

type MyType struct{}

//声明一个interface{}类型的数组，它的长度为5

objs := [5]interface{}{1,"abc",1.5,[1]int{0},MyType{}}


所有类型都默认空接口，包括基本数据类型，这表示所有类型都是interfaceP{
类型的子类型，因此interface{}类型数组就可以装下所有类型的数据

类型断言和类型查询

一个数组或切片是interface{}类型的，要遍历这个数组时，怎么判断
该数据的具体类型？
在go语言中，可以使用多种方式判断一个变量的具体类型或是否实现了
某个接口，这里主要说明一下类型断言与类型查询


类型断言

接口总结

１．接口中的方法必须是空实现，没有方法体
２．接口中不能声明变量
３．　接口不能创建实例，只能通过赋值初始化。赋值对象可以是实现了
接口的自定义类型，也可以是一个接口类型
４．go接口只能隐式实现，即实现接口包含的全部方法
５．除了结构体，其他任意自定义类型都能实现接口
６．所有类型，包含基本类型都默认实现空接口
７．接口是引用类型，其零值是nil

面向对象的三大特性：封装，继承，多态

封装

即将类中抽象出来的属性和对属性的封装在一起，并把数据保护在内部，
进队其他包提供有限的操作权限。封装能隐藏实现细节，提供对数据的验证


go语言中未提供关键字来设置访问权限，类似python,对包外
提供可见与不可见两种权限，
属性名(包括方法名)首字母大写，则包外可访问
首字母小写，则不可访问

go语言主要通过结构体方法，包访问权限来实现封装特性。
go语言标准库提供的所有函数都是大写字母开头，
这就是为了让包外可以访问
继承

继承的主要目的是为了代码复用，也更容易构建类与类之间的
结构化关系

当一个结构体与它继承的结构体存在同名属性或方法时，可以使用
显式的方式访问

go的结构体也可以多继承，多继承时存在同名字段，可以显式访问


除了结构体，接口也可以继承

type A interface{
	Method1()}

type B interface{
	Method2()
}

type C interface{
	A
B
Method3()}

c接口继承了A,B接口，此时要想实现c接口，
就必须将A,B,C中的方法全部实现


多态

实例对象具有多种形态，　可以按照统一的接口来调用
多种不同的实现，即面向对象所谓的多态


go　语言的多态主要体现在两个方面
函数参数多态和数组元素多态上面，而数组元素多态，
就如同接口的interface{}类型数组的例子

//声明一个宠物接口
type Pet interface{
	//声明一个遛狗功能函数
	Walk()
}

//声明猫结构体

type Cat struct{}

func
}
