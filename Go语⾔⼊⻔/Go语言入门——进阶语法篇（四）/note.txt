Go语言入门——进阶语法篇（四）


异常处理与文件

异常处理
error处理
panic与recover
延迟处理

文件读写
带缓冲区
使用ioutil
文件追加
文件的其他操作
获取文件信息
判断文件是否存在
文件拷贝
移动，删除和重命名


异常处理与文件
go没有python的try的处理异常的机制

go使用一种恐慌机制，在有必要的时候，直接让系统宕机，让问题发生时立刻保留出来，不必基类


go语言引入了一个错误处理的标准接口：error接口，并习惯性的默认将错误作为最后一个返回值，如果有的话，
如果我们要自定义错误类型，实现该接口即可


type error interface{
	Error() string
}

自定义类型实现error接口可以提供更丰富的错误信息，但有时候我们希望快速的生成一个简单的
错误，而不是写个结构体，
go还提供了一种快捷创建错误的方式，使用error包


注意，为了提升性能，errors.Newｆ方法不建议在函数中调用，错误的内容是不会变的，
可以在函数外声明好需要的错误，就如同声明一些常量一样。

panic词义为恐慌，recover则表示恢复

延迟处理

上面的例子中defer,该关键字就是用于延迟处理。
defer就相当于用延迟处理，相当于finally,
在整个函数调用完后，最后执行一些关闭句柄的功能

go中，defer除了关闭句柄，还可用于释放并发锁
同一个函数中是可以使用多个defer语句的，多个defer语句的执行顺序遵循栈结构特点
先进后出，最先的defer语句最后执行

带缓冲区

使用os.Create 创建文件会覆盖掉已存在的文件

使用ioutil

在操作小文件时，可以不指定缓冲区，那么就可以使用一种更简单的方式读写文件

文件追加
文件的其他操作

获取文件信息
判断文件是否存在
文件拷贝

移动，删除和重命名

