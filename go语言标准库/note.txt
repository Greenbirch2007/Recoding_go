
第一章　输入输出


io
io/ioutil
fmt
bufio

reader writer  seeker 

whence的值，在os包中定义了相应的常量，应该使用这些常量


close接口比较简单，只有一个close()方法，用于关闭数据流

文件(os.File),归档(压缩包)，数据库连接，Socket等需要手动关闭的资源
都实现了Closer接口

实际编程中，经常讲Close方法的调用放在defer语句中

其他接口

ByteReader,ByteWriter

读或写一个字节

bufio.Reader/Writer 分别实现了io.ByteReader,io.ByteWriter
bytes.Buffer同时实现了io.ByteReader,io.ByteWriter
bytes.Reader实现了io.ByteReader
strings.Reader实现了io.ByteReader

ByteScanner,RuneReadere,RuneScanner

可见，它内嵌了ByteReader接口(可以理解为继承了ByteReader接口)
UnreadByte的意思是，将上一次ReadByte的字节还原，使得再次调用ReadByte
返回的结果和上一次调用相同，

SectionReader类型是一个struct(没有任何导出的字段)，实现了Read,Seek,
ReadAt,同时，内嵌了ReaderAt


1.2 ioutil  方便的io操作函数集

NopCloser函数　ReadAll函数
ReadFile读取整个文件的内容，

TempDir,TempFile函数
操作系统中一般都会提供临时目录，比如linux下的 tmp目录（通过os.TempDir()
可以获取到）

创建者创建的临时文件和临时目录要负责删除这些临时目录和文件

Discard对应的类型(type devNull int)实现了io.Writer接口，
同时，为了优化io.Copy到Discard,避免不必要的工作，实现了io.ReaderFrom接口

1.3 fmt- 格式化io

Printing

占位符

普通占位符

%v 相应值的默认格式
%#v

%T
%%

布尔占位符


%t

整数占位符

%b
%c
%d
%o
%q
%x
%X
%U


浮点数和复数的组成部分(实部和虚部)

%b
%e
%f
%g
%G

字符串与字节切片

%s
%q
%x
%X

指针

%p



宽度和精度的控制格式以Unicode码点为单位

Scanning 一组类似的函数扫描已经格式化的文本来产生值。

scan,scanf,scanlｎ


Print序列函数

Sprint,Sprintf,Sprintln是格式化内容为string类型，而并不输出到某处，
需要格式化字符串病返回时，可以用次组函数

Stringer接口

如果格式化输出某种类型的值，只要它实现了String()方法，
那么会调用String()方法进行处理

Formatter接口　由带有定制的格式化器的值所实现。Format的实现可调用
Sprintf或Fprintf(f)等函数带来生成其输出


通过实实现Formatter接口可以做到自定义输出格式（自定义占位符）

fmt.State是一个接口，由于Format方法是被fmt包调用的，它内部会实例化好一个
fmt.State接口的实例，

GoStringer接口

scan序列函数

Scanner,ScanState接口

任何实现了Scan方法的对象都实现了Scanner接口，Scan方法会从输入读取数据
并将处理结果存入接收端，接收端必须是有效的指针。

ScanState是一个交给用户定制的Scanner接口的参数的接口。
Scanner接口可能会进行一次一个字符的扫描或要求ScanState去探测下一个空白
分隔的token.

1.4 bufio --缓存io

1.4.1 Reader类型和方法

bufio.Reader结构包装了一个io.Reader对象，提供缓存功能，同时实现了io.Reader接口


1.4.1.1　实例化

bufio包提供了两个实例化bufio.Reader对象的函数：
NewReader,NewReaderSize

1.4.1.3 Peek方法

1.4.2 Scanner类型和方法

１．４．２．１　SplitFunc类型和实例

1.4.2.2 Scanner的实例化

Scanner没有到处任何字段，而它需要有外部的io.Reader对象
我们不能直接实例化Scanner对象，必须通过bufio包提供的实例化函数来实例化
实例化函数签名以及内部实现

1.4.2.2  Scanner的方法

Split方法为Scanner实例设置分词行为。由于
Scanner实例的默认split总是ScanLines.如果我们想要用其他的split,可以通过
Split方法做到

1.4.2.3 Scanner使用示例
读取文件中的数据，一次读取一行。


1.4.3 Writer类型和方法

bufio.Writer 结构包装了一个io.Writer对象，提供缓存功能，同时实现了io.Writer接口


Writer结构没有任何导出的字段

如果在写数据到Writer的时候出现了一个错误，不会再允许有数据被写进来了，并且所有随后的写操作都会
返回该错误


１．４．３．１　实例化

１．４．３．２　Available,Buffered方法
前者用户获取缓存中还未使用的字节数(缓存大小－字段n的值)
后者方法获取写入当前缓存中的字节数(字段n的值)


Flush方法　　将缓存中的所有数据写入底层的io.Writer对象中。
使用bufio.Writer时，在所有的Write操作完成之后，应该调用Flush
方法使得缓存都写入io.Writer对象中


ReadWriter类型和实例化


ReadWriter结构存储了bufio.Reader和bufio.Writer类型的指针(内嵌)，
它实现了io.ReadWriter结构

ReadWriter的实例化可以跟普通结构类型一样，也可以通过调用

bufio.NewReadWriter函数来实现：只是简单的实例化ReadWriter


第二章　文本

几乎任何程序都离不开文本(字符串)。go中string的内置理类型，同时它与普通的
slice类型有相似的性质，
strings包提供了很多操作字符串的简单函数，通常一般的字符串操作需求都可以
在这个包中找到

strconv包提供了基本数据类型和字符串之间的转换

进行复杂的文本处理要用正则表达式。regexp包提供了正则表达式功能

go代码使用UTF-8编码，同时标识符支持Unicode字符。

2.1  strings -字符串操作

字符串长度
求子串
是否存在某个字符或子串
子串出现的次数(字符串匹配)
字符串分割(切分)为[]string
字符串是否有某个前缀或后缀
字符或子串在字符串中首次出现的位置或最后一次出现的位置
通过某个字符串将[]string连接起来
字符串重复几次
字符串中子串替换
大小写转换
Trim操作

由于string类型可以是看成是一种特殊的slice类型，因此获取长度可以用内置的函数len
同时支持切片操作。子串获取很容易


是否存在某个字符或子串


子串出现次数(字符串匹配)

在数据结构与算法中，有集中字符串匹配算法


朴素匹配算法
KMP算法
Rabin-Karp算法
Boyer-Moore算法


字符串分割为[]string

Fields,FieldsFunc,Split,SplitAfter,SplitN,SplitAfterN

这两个函数的签名为


func Fields(s string) []string
func FieldFunc(s string,f func(rune) bool) []string



2.1.3 字符串分割为[]string


６个三组分割函数


Fields,FieldsFunc,Split,SplitAfter,
SplitN,SplitAfterN


Fields用一个或多个连续的空格分隔字符串s,返回子字符串的数组(slice)
如果字符串s只包含空格，则返回空列表([]string的长度为０)
其中，空格的定义是unicode.IsSpace

由于是用空格分隔，因此结果中不会含有空格或空字符串

FieldsFunc用这样的Unicode代码点c进行分隔：满足f(c)返回true
该函数返回[]string.
如果字符串s中所有的代码点(unicode code points)都满足f(c)或
s是空，则FieldsFunc返回空slice


我们可以通过实现一个回调函数来指定分隔字符串s的字符。

实际上，Fields函数就是调用FieldsFunc实现的
split,splitafter,splitn,splitaftern
这４个函数放在一起，是因为都是通过一个同一个内部函数来实现的　

都是调用了genSplit函数。这四个函数都是通过sep进行分割，返回[]string
如果sep为空，相当于分成一个个的UTF-8字符
Split("abc","")


2.1.4 字符串是否有某个前缀或后缀


2.1.5 字符或子串在字符串中出现的位置

Contain相关的函数内部调用的是响应的Index函数

2.1.6 字符串JOIN操作

讲字符串数组(或slice)连接起来可以通过join和实现

字符串重复几次

字符串子串替换

进行字符串替换时，考虑到性能问题，能不用正则尽量别用，应该用这里的函数

字符串替换的函数

Replacer类型　　这是一个结构，没有导出任何字段，实例化通过
func NewReplacer(oldnew...string) *Replacer函数进行，
其中不定参数oldnew是old-new对，即进行多个替换

Reader类型

Reader结构没有导出任何字段，而是提供一个实例化方法

该方法接收一个字符串，返回的Reader实例就是从该参数字符串读数据。

2.2 bytes ---byte slice便利操作

该包定义了一些操作byte slice的便利操作。因为字符串可以表示为[]byte,
bytes包定义的函数，方法等和strings包很类似


2.2.1　是否存在某个子slice
[]byte 出现次数

2.3 strconv --- 字符串和基本数据类型之间转换

2.3.1 strconv　包转换错误处理

2.3.2 字符串和整型之间的转换

字符串转为整型　ParseInt,ParseUint,Atoi

整型转为字符串

字符串和布尔值之间的转换
字符串和浮点数之间的转换

ParseFloat,FormatFloat,AppendFloat


2.4 regexp -- 正则表达式
2.5 unicode --- Unicode码点，UTF-8/16编码

unicode包包含基本的字符判断函数。utf8包主要负责rune和byte之间的转换


go语言的所有代码都是UTF8的，所以如果在程序中的字符串都是utf8编码的，
但是我们的单个字符(单引号括起来)却是unicode的


2.5.1 unicode包


2.5.2 utf8包里面的函数就有一些字节和字符的转换

判断是否符合utf8编码的函数


第三章　数据结构与算法

程序设计离不开数据结构和算法。数据结构是数据组织和存储的逻辑形式，
以达到方便访问和修改数据的目的。而算法是根据实际输入输出的需求
设计的一系列计算过程。

sort包包含基本的排序方法，支持切片数据排序以及用户自定义数据集合排序
index/suffixary包实现了后缀数组相关算法以支持许多常见的字符串操作
container包提供了对heap,list和ring这３种数据结构的底层支持。
任何实现相应接口的数据结构都可以调用该结构的方法



sort --- 排序算法

插入排序，归并排序，堆排序，快速排序
sort.Interface定义了三个方法：
Len()方法，获取数据集合长度
Less()，比较两个元素大小
Swap(),交换两个元素位置

就可以顺利堆数据集合进行排序。

sort包会根据实际数据自动选择高效的排序算法。
除此之外，为了方便对常用数据类型的操作，sort包提供了对[]int切片，
[]float64,[]string切片完整支持

１．对基本数据类型切片的排序支持
２、基本数据元素查找
３、判断基本数据类型切片是否已经排好序
４．　对排好序的数据集合逆序


３．１．１　数据集合排序

对数据集合(包括自定义数据类型的集合)排序需要实现sort.Interface
接口的三个方法

数据集合实现了三个方法后，即可调用该包的Sort()方法进行排序。
Sort()方法唯一的参数就是待排序的数据集合

该包还提供了一个方法可以判断数据集合是否已经排好顺序，该方法的内部
实现依赖于我们自己实现的Len()和Less()方法

sort包提供了Reverse()方法，可以允许将数据按Less()定义的排序方法
逆序排序，而不必修改Less()代码


可以看到Reverse()返回的一个sort.Interface接口类型，整个
Reverse()内部实现

Search()函数一个常用的使用方式是搜索元素x是否在已经升序排好的切片s红

sort包已经支持的内部数据类型排序


sort包原生支持[]int,[]float64,[]string三种内建数据类型切片
的排序操作，即不必我们自己实现相关的Len(),Less(),Swap()方法

container -- 容器数据类型：heap,list,ring
堆，链表，环。这个包就意味着使用这三个数据结构的时候
不要从头开始


堆使用的数据结构是最小二叉树，即根节点比左边子树和右边子树的所有
值都小。go的堆包只是实现了







