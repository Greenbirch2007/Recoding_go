

go是一种新的语言，一种并发的，带垃圾回收的，快速编译的语言

１．它可以在一台计算机上用几秒钟的时间编译一个大型的go程序
２．go为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分c风格include文件与库的开头
３．　go是静态类型的语言，它的类型系统没有层级。因此用户不需要在定义类型之间的关系上话费时间，
这样感觉其类比典型的面向语言更轻量级
４．go完全是垃圾回收型的语言，并为并发执行与通信提供了基本的支持


按照其设计，go打算为多核机器上系统软件的构造提供一种方法


go是一种编译型语言，它集合了解释型语言的游刃有余，动态类型语言的
开发效率，以及静态类型的安全性。

它也大打算称为现代的，支持网络与多核计算的语言
要满足这些目标，需要解决一些语言上的问题：
一个富有表达能力但轻量级的类型系统，
并发与垃圾回收机制，严格的依赖规范等

这些无法通过库或工具解决好的，

GOPATH与工作空间

在安装GOPATH这个目录，用来存放go源码，go的可运行文件，
自己相应的编译之后的文件。所以有三个目录:src,bin,pkg


从go1.8开始，GOPATH环境变量现在有一个默认值，
如果它没有被设置。
它在Unix上默认为$HOME/go
在Windows上默认为%USERPROFILE%/go


GOPATH设置


go命令依赖一个重要的环境变量：$GOPATH

GOPATH允许多个目录，当有多个目录树，请注意分隔符，多个目录的
时候Windows是分号，Linux系统是冒号，当有多个GOPATH时，
默认会将go get的内容放在第一个目录下


以上$GOPATH目录约定有３个子目录

１．src存放源代码(比如，.go,.c,.h等)
２．pkg编译后生成的文件(比如.a)
3. bin编译后生成的可执行文件(可以把此目录加入到$PATH变量中，
如果有多个gopath,那么使用${GOPATH//://bin:}/bin添加所有的bin目录)


代码目录结构规划


GOPATH下的src目录就是开发程序的主要目录，所有的源码都是放在这个目录下
，那么一般我们的做法就是一个目录一个项目，

例如:$GOPATH/src/mymath表示mymath这个应用包或可执行应用，

这个根据package是main还是其他来决定，
main的话就是可执行应用，其他对的话就是应用包，

所以当新建应用或一个代码包时都是在src目录下新建一个文件夹，
文件夹名称一般是代码包名称，当然也允许多级目录，例如在src下面新建了目录

$GOPATH/src/github.com/astaxie/beedb那么这个包路径
就是"github.com/astaxie/beedb"，包名称是最后一个目录beedb

写一个应用包

这样我的应用包目录和代码已经新建完毕，注意：一般建议package的名称和目录
名保持一致


编译应用

已经建立了自己的应用包，如何进行编译安装？有两种方法进行安装

１．　只要进入对应的包目录，然后执行go install,就可以安装了
2. 在任意的目录执行如下代码go install　mymath


.a文件是应用包，如何调用？

仙剑一个应用程序来调用这个应用包


新建应用包mathapp

cd $GOPATH/src
mkdir mathapp

cd mathapp
vim main.go

$GOPATH/src/mathapp/main.go


package main

import (
"mymath"
"fmt"
)

func main(){
	fmt.Printf("Hello,world! Sqrt(2)=%v \n",mymath.Sqrt(2))
}

可以看到这个的package是main，import 里面调用的包是mymath,这个就是相对于
$GOPATH/src路径，如果是多级目录，就在import里面引入多级路，
如果你有多个GOPATH,也是一样，go会自动在$GOPATH/src中寻找


如何编译程序呢？进入该应用目录，然后执行go build,
那么在该目录下面会生成一个mathapp的可执行文件

./mathapp

如何安装应用，进入该目录执行go install，那么在$GOPATH/bin/下增加了
一个可执行文件mathapp,还记得把$GOPATH/bin加到我们的PATH里面了，
这样可以在命令行输入如下的命令就可以执行

matapp


这里展示如何编译和安装一个可运行的应用，以及如何设计我们的目录结构


获取远程包

go语言有一个获取远程包的工具,go get,


go get github.com/astaxie/beedb

go get -u参数可以自动更新包，而且当go　get的时候自动获取该包依赖的
其他第三方包

通过这个命令可以获取相应的源码，对应的开源平台采用不同的源码控制工具，
例如github 采用git


$GOPATH----src----github.com----astaxie-----beedb



$GOPATH----pkg-----相应平台----github.com----astaxie----beedb.a


go get本质上可以理解为首先第一步是通过源码工具clone代码到src下面

然后执行go install

在代码中如何使用远程包，跟本地包一样，只要在开头加上相应路径即可


程序的整体结构


mygo的目录结构如下

bin/
	mathapp


pkg/
	平台名/如: darwin_amd64, linux_amd64
			mymath.a
			github.com/	
				astaxie/	
					beedb.a


src/

	mathapp
		main.go

	mymath/
		sqrt.go
	github.com/
		astaxie/
			beedb/
				beedb.go
				util.go


从上面的结构可以清晰看到，bin目录下面存的是编译之后可以执行的文件，
pkg下面存放的是应用包

src下面保存的是应用源代码

go 命令

go build ，主要用于编译代码。在包的编译过程中，若有必要
会同时编译与之相关联的包

如果是普通包，当执行go build 之后，它不会产生任何文件。如果需要
在$GOPATH/pkg下生成相应的文件，那就得执行go install

2.如果main包，当你指定go build之后，它就会在当前目录下生成一个
可执行文件，如果你需要在$GOPATH/bin下生成相应的文件，
需要执行go install，或使用go build -o 路径/a.exe

3. 如果某个项目文件加下有很多文件，而你只想编译某个文件，就可
在go build之后加上文件名，例如go build a.go
go build命令默认会编译当前目录下的所有go文件

４．你也可以指定编译输出的文件名。
例如mathapp应用，我们可以指定go build -o astaxie.exe
默认情况下是你的package名(非main包)或第一个原文件的文件名(main包)


实际上，package名在go语言规范中指代码中"package"后使用的名称
此名称可以与文件夹名不同。默认生成的可执行文件名是文件夹名


go build会忽略目录下"_"或"."开头的go文件

如果你的源代码针对不同的操作系统需要不同的处理，那么你可以根据不同的
操作系统后缀来命名文件。
例如有一个读取数组的程序，它对于不同的操作系统可能有如下几个源文件

go build的时候会选择型地编译以系统名结尾的文件


go build -o 指定输出的文件名，可以带上路径，例如，go build -o a/b/c

go build  -i 安装相应的包，编译　go install
go build  -a更新全部已经是最新的包的，但是对标准包不适用
go build 　-n把需要执行的编译命令打印出来，但是不执行，
这样就可以很容易的直到底层是如何运行的

go build -p n指定可以并行可运行的编译数目，默认是CPU数目
go build -race开启编译的时候自动检测数据竞争的情况，
目前只支持64位的机器

go build -v打印出来当我们正在编译的包名

go build -work打印出来编译时的临时文件夹名称，并且
如果已经存在的话就不要删除

go build -x 打印出来执行的命令，其实就是和-n的结果类似，
只是这个会执行


go build 　-ccflags 'arg list'　传递参数给5c,6c,8c调用

go build  -compiler name　指定相应的编译器，gccgo还是gc

go build -gccgoflags 'arg list' 传递参数给gccgo编译连接调用

go build -gcflags 'arg list'传递参数给5g,6g,8g调用


go build 　-installsuffix suffix为了和默认的安装包区别开发来
采用这个前缀来重新安装哪些依赖的包

go build -race的时候默认已经是 -installsuffix race,
大家可以通过go build -n命令来验证

go build -ldflags　'flag list' 传递参数给5l,6l,8l调用


go build -tags 'tag list'设置在编译的时候可以适配的那些
tag,详细的tag限制参数里


go clean,用来移除当前源码包和关联源码里面编译生成的文件。
这些文件包括


_obj/  旧的object目录，由Makefiles遗留
_test/　	旧的test目录,由Makefiles遗留
_testmain.go	旧的gotest文件，由Makefiles遗留
test.go  	旧的test记录，由Makefiles遗留
build.out 	旧的test记录，由Makefiles遗留
*.[568ao]	object文件，由Makefiles遗留

DIR(.exe)	由go build 产生
DIR.test(.exe) 	由 go test -c产生
MAINFILE(.exe) 由go build　MAINFILE.go产生

*.go 	由SWIG产生

我一般都是利用这个命令清楚编译文件，然后github递交源码，在本机
测试的时候这些编译文件都是和系统相关的，但是对于源码管理没有必要


go clean =i -n

go clean -i　清除关联的安装的包和可运行恩建，也就是通过go install安装的文件
go clean -n 把需要执行的清楚命令打印出来，但是不执行，这样就可以很容易
的知道底层是如何运行的

go clean -r 循环的清除在import中引入的包
go clean -x打印出来执行的详细命令，其中就是-n打印的执行版本


go fmt,可以格式化写好的代码文件，使得写代码的时候不需要关心格式，

只需要在写完之后执行go fmt<文件名>.go

你的代码就被修改成标准格式，
开发工具里面一般都带来保存时候自动格式化功能，
这个功能其实在底层就是调用了go fmt


使用go fmt命令，其实是调用了go fmt,而且需要参数-w

否则格式化结果不会写入文件。

gofmt-w -l src，可以格式化整个项目


所以go fmt是gofmt的上一层一个包装的命令，我们想要更多的个性化的
格式化可以参考gofmt

gofmt 的参数介绍


gofmt -l显示那些需要格式化的文件
gofmt -w 把改写后的内容直接写入到文件中，而不是作为结果打印到
标输出
gofmt -r　添加形如"a[b:len(a)->a[b:]]"的重写规则，方法我们做
	批量替换

gofmt -s 简化文件中的代码
gofmt -d 显示格式化前后的diff而不是写入文件，默认是false
gofmt  -e 打印所有的语法错误到标准输出。如果不使用此标记，
	则只会打印不同行的前１０个错误

gofmt -cpuprofile 支持调试模式，写入相应的cpufile到指定的文件

go get ,用来动态获取远程代码包。这个命令在内部实际上分成了两步
操作：
第一步是下载源码包，
第二步，执行go install

下载源码包的go工具会自动根据不同的域名调用不同的源码工具

所以为了go get能正常工作，你必须确保安装了合适的源码管理工具，
并同时把这些命令加入你的PATH中。
其实go get支持自定义域名的功能

go get -d 只下载不安装
go get -f　只有在你包含了-u参数的时候才有效，不让-u
	去验证import中的每一个都已经获取了，这对于本地fork
	的包特别哟用

go get -fix在获取源码之后先运行fix,然后再去做其他的事情

go get -t同时也下载需要为运行测试所需要的包
go get -u强制使用网络去更新包和它的依赖包
go get -v显示执行的命令

go install ,这个命令在内部实际上分成了两步操作：
１．第一步是生成结果文件(可执行文件或.a包)
２．第二步会把编译好的结果移到$GOPATH/pkg或$GOPATH/bin

参数支持go build的编译参数。大家只要记住一个参数-v就好了，这个
随时随地的可以查看底层的执行信息


go test  ,执行这个命令，会自动读取源码目录下名为*_test.go的文件
生成并运行测试用的可执行文件


默认情况下，不需要任何的参数，它会自动把你源码包下面所有test
文件测试完毕，当然你也可以带上参数

go test  -bench regexp，执行相应的benchmarks，例如　-bench=.
go test  -cover 开启测试覆盖率
go test  -run regexp 只运行regexp匹配的函数，例如 -run=Array
	那么就执行包含有Array开头的函数

go test  -v显示测试的详细命令


go tool 下面下载聚集了很多命令，

go tool fix .用来修复以前老版本的代码到新版本，
例如go1之前老版本的代码转化到go1,例如API的变化

go tool vet directory|files 用来分析当前目录的代码是否都是
正确的代码，例如是不是调用fmt.Printf里面的参数不正确，例如
函数里面提前return了然后出现了无用代码之类的

go generate ,用于在编译前自动化生成某类代码。
go generate 通过分析源码中特殊的注释，然后执行相应的名。

go语言基础

go是一门类似c的编译型语言，它的编译速度非常快。

２５个关键字

break,default,func,interface,select
case,defer,go,map,struct
chan,else,goto,package,switch
const,fallthrough,if,range,type
continue,for,import,return ,var



使用var关键字是go最基本的定义变量方式，

_(下划线)　是个特殊的变量名，任何赋予它的值都会被丢弃

_,b := 34,35

go对于已经声明但未使用的变量会在编译阶段操作，
声明了i但未使用

所谓常量，也就是在程序编译阶段就确定下来的值，而程序在运行时
无法改变该值。
在go程序中，常量可定义为数值，布尔值或字符串等类型

go中的字符串都是采用utf-8字符集编码。
字符串是用一对双引号(")或反引号(`)括起来定义，它的类型是string


错误类型

go内置有一个error类型，专门用来处理错误信息，go的package
里面还专门有一个包errors来处理错误


err := errors.New("emit macho dwarf:elf header corrupted")
if err != nil{
	fmt.Print(err)
}

go数据底层的存储

分组声明

在go语言中，同时声明多个常量，变量，或导入多个包时，可采用分组的
方式进行声明


iota枚举

go里面有一个关键字iota,这个关键字用来声明enum的时候采用，它
默认开始值是0,const每增加一行加１

除非被显式设置为其他值或iota,每个const分组的第一个常量
被默认设置为它的０值，第二及后续的常量被默认为它前面那个常量的值
如果起那么那个常量的值为iota，则它也被设置为iota

g程序设计的一些规则

１．大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有
变量；小写字母开头的就是不可导出的，是私有变量
２．大写字母开头的函数也是一样，相当于class中带public关键词
的公有函数；小写字母开头的就是有private关键词的私有函数



array,slice,map


array就是数组

var arr [n]type

在[n]type中，n表示数组的长度，type表示存储元素的类型。
对数组的操作和其他语言类似，都是通过[]来进行读取或赋值

var arr [10]int //声明一个int类型的数组
arr[0] = 42 //数组下标是从0开始的
a

由于长度也是数组类型的一部分，因此[3]int与[4]int是不同的类型
数组也就不能改变长度。数组之间的赋值是值的赋值，
即当把一个数组作为参数传入函数的时候，传入的其实是该数组的
副本，而不是它的指针。如果要使用指针，那么就需要用到slice

数组可以使用另一种　:=来声明
go支持嵌套数组，即多维数组

//声明一个二维数组，该数组以两个数组作为元素与，其中
//每个数组中又有４个int类型的元素

doubleArray := [2][4]int{1,2,3,4}, [4]int{5,6,7,8}}

可以简化，直接忽略内部的类型


easyArray := [2][4]int{{1,2,3,4},{5,6,7,8}}

slice

在很多应用场景中，数组并不能满足我们的需求。
在初始定义数组时，我们并不知道需要多大的数组，
因此我们就需要"动态数组"。在go里面这种数据结构叫做slice

slice并不是真正意义上的动态数组，而是一个引用该类型。
slice总是指向一个底层array，slice的声明也可以像array一样，只是不需要长度

var fslice []int

slice := []byte{'a',"b"}

slice可以从一个数组或一个已经存在的slice中再次声明.slice通过
array[i:j]来获取，其中i是数组的开始位置，j是结束位置，但不包含array[j],它的长度是j
j-i


//声明一个含有10个元素元素类型为byte的数组

var ar =[10]byte{"a"}

注意slice和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或
使用...自动计算长度，而声明slice时，方括号内没有任何字符

slice是引用类型，所以当引用改变元素的值时，其它的所有引用都会改变该值，

结构体包含了三个元素：
１．一个指针，指向数组中slice指定的开始位置
２．长度，即slice的长度
３．　最大长度，也就是slice开始位置到数组的最后位置的长度

slice有几个有用的内置函数

１．　len获取slice的长度
2. cap获取slice的最大容量
３．　append向slice里面追加一个或多个元素，然后返回一个和slice一样类型的slice
4. copy函数copy从源slice的src中复制元素到目标dst,并且返回复制的元素的个数

注：append函数会改变slice所引用的数组的内容，从而影响到引用同一数组的其他slice\

但当slice中没有剩余空间(即(cap-len)==0)时，此时将动态分配新的数组空间。
返回的slice数组指针将指向这个空间，而原数组的内容将保持不变；
其他引用数组的slice则不受影响

map的读取和设置也类似slice一样，通过key来操作，只是slice的index
只能是'int'类型，而map多了很多类型，可以是int,可以是string
及所有完全定义了==与!=操作的类型

声明一个key是字符串，值为int的字典，这种方式的声明需要在使用前使用make初始化

map使用过程中要注意

1. map是无序的，每次打印出来的map都会不一样，它不能通过index获取，
而必须通过key获取

２．map的长度是不固定的，也就是和slice一样，也是一种引用类型
３．　内置的len函数同样适用于map,返回map拥有的key的数量
４．　map的值可以很方便的修改，通过nubmers["one"] = 11可以人很容易的　
把key为one的字典改为11
5. map和其他基本型别不同，它不是thread-safe,在多个go-routine存取时，
必须适用mutex lock机制

map的初始化可以通过key:val的方式初始化值，同时map内置有判断是否存在key
的方式


通过delete删除map的元素

初始化一个字典
map也是一种引用类型，如果两个map同时指向一个底层，那么一个改变，
另一个也相应的改变

m := make(map[string]string)
m["hello"] = "Bonjour"
m1 := m
m1["Hello"] ="salut"


make,new操作


make用于内建类型(map,slice,channel)的内存分配。new用于各种类型的内存分配

内建函数new本质上说跟其他语言中的同名函数一样：new(T)分配了零值
填充的T类型的内存空间，并且返回其地址，即一个*T类型的值。
用go的术语来说，它返回一个指针，指向新分配的类型T的零值。

new返回指针

内建函数make(T,args)与new(T)有着不同的功能，make只能创建slice,
map和channel,并且返回一个有初始值(非零)的T类型，而不是*T

本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前
必须被初始化。例如，一个slice,是一个包含指向数据(内部array)的指针
长度和容量的三项描述符；
在这些项目被初始化之前，slice为nil.对于slice,map和channel来说，
make初始化了内部的数据结构，填充适当的值

make返回初始化后的(非零)值

零值

关于"零值"，所并非是空值，而是一宗变量未填充前的默认值，通常为0

函数是go的核心设计，通过关键字func来声明

1.关键字func用来声明一个函数funcName
2.函数可以有一个或多个参数，每个参数后面带有类型，通过,分隔
3.函数可以返回多个值
４．　上面返回值声明了两个变量output1和output2,如果你不想声明也可以，
直接就两个类型
５．如果只有一个返回值且不声明返回值变量，那么你可以省略包含返回值的括号
６．如果没有返回值，那么就直接省略最后的返回信息
７．　如果有返回值，那么必须在函数的外层添加return语句

多个返回值

go语言比c更先进的特性，其中一点就是函数都能够返回多个值

go函数支持变参。接受便餐的函数是有着不定数量的参数的。
为了做到这点，首先需要定义函数使其接受变参：

func myfunc(arg...int){}

arg...int告诉go这个函数借书不定数量的参数。
在函数体中，变量arg是一个int的slice

for _,n := range arg{
	fmt.Printf("And the number is :%d\n",n)}

传值与传指针

当我们传一个参数值到被调用函数里时，实际上是传了这个值的一份copy,
当在被调用函数中修改参数值的时候，调用函数中相应实参不会发生任何变化，
因为数值变化只作用在copy上

变量在内存中是存放于一定地址上的，修改变量实际是修改变量地址处的
内存。需要将x所在地址&x传入函数，并将函数的餐胡的类型由int改为*int
，即为指针乐行，才能在函数中修改x变量的值。
此时参数仍然是按copy传递的，只是copy的是一个指针

传指针的好处

１．传指针使得多个函数能操作同一个对象
２．传指针比较轻量级(8bytes),只是传内存地址，我们可以用指针传递
体积较大的结构体。如果用参数值传递的话，在每次copy上吗就会花费
相对较多的系统开销(内存和时间)
所以当你要传递大的结构体是，用指针会很有效率
３．　go语言中channel,slice,map这三种类型的实现机制类似指针，
所以可以直接传递，而不用取地址后传递指针
如果函数需要改变slice的长度，则仍需要取地址传递指针

defer

go语言中的有种，延迟(fefer)语句，你可以在函数中添加多个defer语句
当函数执行到最后时，这些defer语句会按照逆序执行，最后该函数返回。
特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，
在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题


函数作为值，类型

在go中函数也是一种变量，我们可以通过type来定义它，
它的类型就是所有拥有相同的参数，相同的返回值的一种类型


声明了一个函数类型

函数当做值和类类型在一些通用接口的时候非常有用


Panic和Ｒecover


panic
是一个内建函数，可以中断原有的控制流程，进入一个panic状态中。当函数
F调用panic，函数F的执行被中断，但是F中的延迟函数会正常执行，然后
F返回到调用它的地方。在调用的地方，F的行为就像调用了panic.
这一过程继续向上，直到发生panic的goroutine中所有调用的函数返回，
此时程序退出。panic可以直接调用panic产生。也可以由运行时错误产生，
例如访问越界的数组


Recover

是一个内建的函数，可以让panic状态的goroutine恢复过来。recover仅
在延迟函数中有效。在正常的执行过程中，调用recover会返回nil,
并且没有任何效果。如果当前的goroutine陷入panic状态，调用recover
可以捕获到panic的输入值，并且恢复正常的执行

main函数和init函数

go里面有两个保留的函数：
init函数(能够应用于所有的package)
main函数(只能应用于package main)

这两个函数在定义时不能有任何的参数和返回值。
虽然一个package里面可以写任意多个init函数，但这无论是对于可读性
还是以后的可维护性来说，我们都强烈建议用于在一个package中每个
文件只写一个init函数


go函数会自动调用init()和main(),所以你不需要在任何地方调用
这两个函数。每个package中的init函数都是可选的，但是package main
就必须包含一个main函数

程序的初始化和执行都起始于main包。如果main包还导入了其他的包，
那么就会在编译时将它们依次导入。有时一个包会被多个包同时导入，
那么它只会被导入一次(例如很多包可能会用到fmt包，但它只会被导入一次，
因为没有必要导入多次)
当一个包被导入时，如果该包还导入了其他的包，那么会先将其他包导入进来
然后再对这些包中的包级常量和变量进行初始化，接着执行init函数(如果有的话)
等所有被导入的包都加载完毕了，就会开始对main包中的包级常量和变量进行
初始化，然后执行main包中的init函数(如果存在的话)
最后执行main函数


声明的函数类型在这个地方做了一个参数

struct 
go语言，也和c或其他语言一样，可以声明新的类型，作为其它类型的
属性或字段的容器。


声明一个struct

1.一个string类型的字段name,用来保存用户名称这个属性
２．一个int类型的字段age,用来保存用户年龄这个属性


结构体实例的声明方式：
１．按照顺序提供初始化值


P := person{"Tom",25}


2.通过 field:value的方式初始化，这样可以任意顺序

P := person{age:24,name:"Tome"}

3.当然也可以通过new 函数分配一个指针，此处P的类型为*person


P := new(person)


struct的匿名字段


go支持只提供类型，而不写字段名的方式，也就是匿名字段，也称为嵌入字段。


当匿名字段是一个strut的时候，那么这个struct所拥有的全部字段都被隐式
地引入了当前定义的这个struct


Student访问属性age和name的时候，就想访问自己所有用的字段一样，
匿名字段实现了字段的继承。
student还能访问Human这个字段作为字段名

mark.Human = Human{"Marcus",55,220}
mark.Human.age = -=1

通过匿名访问和修改字段相当有用，不仅仅是struct字段，所有的内置类型
和自定义类型都是可以作为匿名字段的

struct不仅仅能够将struct作为匿名字段，自定义类型，内置类型都可以
作为匿名字段，而且可以在相应的字段上面进行函数操作


最外层的优先访问，也就是通过student.phone访问的时候，是访问student里面的
字段，而不是human里面的字段


这样就允许我们去重载通过匿名字段继承的一些字段，当然如果我们
想访问重载后对应匿名类型里面的字段，可以通过匿名字段来访问



面向对象


前面介绍了函数和struct,那么函数是否可以当做struct的字段来处理

函数的另一种形态，带有接收者的函数，称为method


method

假设有一个场景，定义了一个stuct叫做长方形，

method是附属在一个给定的类型上的，它的语法和函数的
声明语法几乎是一样，只是在func后面增加了一个receive（也就是method所依从的主题）

method area()是依赖于某个形状(比如说Retangle)
来发生作用的。Rectangle.area()的发出者是Rectangle,
area()是属于Rectanle的方法，而非一个外围函数

更具体的，Rectangle存在字段height和width,同时存在方法area()
这些字段和方法都属于Rectangle

method使用的时候要注意：
１．虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样
２．method里面可以访问接收者的字段
３．　调用method通过，访问，就像struct里面访问字段一样

method　area()分别属于Rectangle和Circle，这个area()方法
是由Rectangle/Circle发出的

method用虚线标出，此处的意思是Receiver是以值传递，而非引用传递，
Receiver还可以是指针，两者的差别在于，指针作为Recevier会对实例
对象的内容发生操作，而不同类型作为Receiver仅仅以副本作为
操作对象，并不对原实例对象发生操作

struct只是自定义类型里面一种比较特殊的类型而已，还有其他自定义类型申明
可以通过如下这样的申明来实现。

type typeName typeLiterial

申明自定义类型


type ages int

type money float32
type months map[string]int

m := months{
	"January":31,
	"February":28,
	...
	"December":31,
}


实际上只是定义了一个别名


指针作为receiver


它的receiver是一个指向Box的指
如果一个method的receiver是*T,你可以在一个T类型的实例变量V上面滴啊用这个
method,而不需要&V去调用这个method

如果一个method的receiver是T,你可以在一个*T类型的变量P上面调用这个method
而不需要*P去调用这个method

method继承

method也是可以继承的。如果匿名字段实现了一个method，那么包含
这个匿名字段的stuct也能调用method

go语言中的面向对象，没有任何的私有，公有关键字，通过大小写来实现(大写开头的为公有，
小写开头的为私有)，方法也同样使用这原则


interface是一组method签名的组合，我们通过interface来定义对象的一组行为


Student和Employee实现另一个方法Sing,然后Student实现方法BorrowMoney
而Employee实现SpendSalary

Student 实现了三个方法：SayHI,Sing,BorrowMoney而Employee时薪了
SayHi,Sing,SpendSalary

上面的组合称为interface(被对象Stundent和Employee实现)
例如Student和Eployee都实现了interface:SayHi和Sing.
也就是这两个对象该interface类型。
而Employee没有实现这个interface:SayHi,Sing和BorrowMoney,
因为Employee没有实现BorrowMoney这个方法

interface类型

interface类型定义了一组方法，如果某个对象实现了某个接口的所有方法，则
此对象就实现了此接口

type Human struct{
	name string
	age int
	phone string
}

type Student struct{
	Human // 匿名字段Human
	school string
	loan float32
}

type Employee struct{
	Human //匿名字段Human
	company string
	money float32
}


//Human对象实现SayHi方法

func(h *Human) SayHi(){
	fmt.Printf("Hi, I am %s you can call me on %s \n",h.name,h.phone)
}

//Human 对象实现Sing方法
func (h *Human)　Sing(lyrics string){
	fmt.Println("la la,la la la,...",lyrics)
}


//Human对象实现Guzzle方法


func (h *Human) Guzzle(beerStein string){
	fmt.Println("Guzzle Guzzle ...",beeStein)
}

func (e *Employee)SayHi(){
	fmt.Printf("Hi,")


interface可以被任意的对象实现。一个对象可以实现任意多个interface,
任意的类型都实现了空interface(我们这样定义:interface{})
也就是包含0个method的interface

interface值

如果我们定义了一个interface的变量，那么这个变量里面可以存实现这个interface
的任意类型的对象。

因为m能够持有这三种类型的对象，所以我们都可以定义一个包含Men类型元素的slice,
这个slice可以被赋予实现Men接口的任意结构的对象，这个和我们传统
意义上面的slice有所不同

interface就是一组抽象方法的集合，它必须由其他非interface类型实现，
而不能自我实现，go通过interface实现duck-typing即

空interface

空interface(interface{})不包含任何的method,所有的类型都实现了空interface

空interface对于描述起不到任何的作用(因为它不包含任何的method)
但是空interface在我们需要存储任意类型的数值的时候相当有用，
因为它可以存储任意类型的数值，它有点类似与c语言的void*类型

//定义a为空接口

var a interface{}
var i int =5
s := "Hello World"
//a可以存储任意类型的数值

a = i
a =s


一个函数把interface{}作为参数，那么他可以接受
任意类型的值作为参数，如果一个函数返回interface{}

那么也就可以返回任意类型的值。

interface函数参数

interface的变量可以持有任意实现该interface类型的对象，
这给我们编写函数(包括method)提供了一些额外的思考，
我们是不是可以通过定义interface参数，
然后函数接受各种类型的参数

fmt.Println是我们常用的一个函数，但是你是否注意到
它可以接受任意类型的数据

打开fmt的源码文件，

注：实现了error接口的对象(即实现了Error()string的对象)
使用fmt输出时，会调用Error()方法，因此不必再定义String()方法了


interface变量存储的类型

我们知道interface的变量里面可以存储任意类型的数值(该类型实现了
interface)那么我们怎么反向知道这个变量里面实际保存了
的是哪个类型的对象？目前常用的有两种方法：

Comma-ok断言

go语言里面有一个说法，可以直接判断是否是该类型的变量：
value,ok =element.(T),这里value就是变量的值，
ok是一个bool类型，element是interface变量，
T是断言的类型

如果element里面确实存储了T类型的数值，那么ok返回true,
否则返回false

嵌入interface

go里面真正吸引人的是它内置的逻辑语法，就像在学习stuct时学习
的匿名字段，那么相同的逻辑运入到interface里面
如果一个interface1作为interface2的一个嵌入字段，
那么interface2隐式的包含了interface1里面的method


io包下面的io.ReadWriter,它包含了io包下面的Reader和Writer两个
interface


//io.ReadWriter

type ReadWriter interface{
	Reader
	Writer
}


反射

go语言实现了反射，所谓反射就是能检查程序在运行时的状态。
我们一般用到的包就是reflect包。
如何运用reflect奥，

使用reflect一般分成三步，要去反射是一个类型的值(这些值都
实现了空nterface),首先需要把它转化成reflect对象
(relect.Type或reflect.Value
根据不同的情况调用不同的函数)

转化为reflect对象之后我们就可以进行一些操作了，也就是
将relect对象转化成相应的值

tag := t.Elem().Field(0).Tag //获取定义在struct里面的标签

name := v.Elem().Field(0).String //获取存储在第一个字段里面的值


获取反射值能返回相应的类型和数值

var x float64 =3.4
v := relect.ValueOf(x)

fmt.Println("type:",v.Type())
fmt.Println("kind is float64:",v.Kind() == reflect.Float64)

反射的话，那么反射的字段必须是可修改的，我们前面学习过传值和传引用，
这里面也是一样的道理。
反射的字段必须是可读写的意思，


goroutine是go并行设计的核心。goroutine其实就是协程，
但是它比线程更小，十几个gorouine可能体现在底层就是五六个线程，
go语言内部帮你实现了这些goroutine之间的内存共享。
执行goroutine只需极少的栈内存(大概4-5kb),当然会根据相应的数据伸缩。
可同时运行上千万个并发任务

goroutine比thread更易用，更高效，更轻便


goroutine是通过go的runtime管理的一个线程管理器。goroutine通过go
关键字实现了，其实就是一个普通的函数

go hello(a,b,c)


通过关键字go就启动了一个goroutine


package main

import (
	"fmt"
	"runtime"
)


func say(s string){
	for i:=0;i<5;i++{
		runtime.Gosched()
		fmt.Println(s)
}}

func main(){
	go say("world") //开一个新的Goroutines执行
	say("hello") //当前Goroutines执行
}

可以看到go关键字很方便的就实现了并发编程。多个goroutine运行在同一个
进行里面，共享内存数据，不过设计上我们要遵循：不要通过共享来通信，
而要通过通信来共享

runtime.Gosched()表示让CPU把时间让给别人，下次某个时候继续
恢复恢复执行该goroutine


默认情况下，在go1.5将标识并发系统线程个数的runtime.GOMAXPROCES
的初始值由１改为了运行环境的CPU核数

但在go1.5以前调度器仅使用单线程，也就是说只实现了并发。
想要发挥多核处理器的并行，需要在我们的程序中显式调用runtime.GOMAXPROCES(n)
告诉调度器同时使用多个线程。GOMAXPROCES设置了同时运行逻辑代码的系统线程的
最大数量，并返回之前的设置。如果n<1,不会改变当前设置


channels

goroutine运行在相同的地址空间，因此访问共享内存必须做好同步。
那么goroutine之间如何进行数据的通信呢，go提供了一个很好的通信
机制channel.channel可以与Unix　shell中的双向管道做类比
可以通过它发送或接收值。
这些值只能是特定的类型：channel类型。定义一个channel时，
也需要定义发送到channel的值的类型。注意，必须使用make创建channel

ci := make(chan int)
cs := make(chan string)
cf := make(chan interface{})


channel通过操作符<-来接收和发送数据

ch <- v //发送v到channel ch.
v := <-ch //从ch中接收数据，并赋值给v

默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，
这样就使得Goroutines同步变得更加简单，而且不需要显示的lock。
所谓阻塞，也就是如果读取(value:=<-ch),它将会被阻塞，
直到数据接收。
其次，任何发送(ch<-5)将会被阻塞，直到数据被读出。
无缓冲channel是在多个goroutine之间同步很棒的工具


Buffered Channels

介绍了非缓存类型的channel,不过go也允许指定channel的缓冲大小，
就是channel可以同时存储多少元素。
ch := make(chan bool,4),创建了可以存储４个元素的bool型channel
在这个channel中，前４个元素可以无阻塞的写入。
当写入第５个元素时，代码将会阻塞，直到其他goroutine从channel中
读取一些元素，腾出空间

ch := make(chan type,value)

当value=0时，channel是无缓冲阻塞读写的，当value>0时，channel有缓冲，
是非阻塞的，直到写满value个元素才阻塞写入


Range和Close

我们需要读取两次c，这样不是很方便，go考虑到这一点，所以也可以通过该
range，像操作slice或map一样操作缓存类型的channel

for i := range c 能够不断的读取channel里面的数据，直到该
channel被显式的关闭。上面代码我们看到可以显式的关闭channel,
生产者通过内置函数close关闭channel
关闭channel之后就无法再发送任何数据了，在消费方可以通过语法v,ok := <-ch

测试channel是否被关闭。如果ok返回false，那么说明channel已经
没有任何数据了，在消费方可以通过语法v,ok := <- ch测试
channel是否被关闭了。如果ok返回false，那么说明channel已经没有
任何数据并且已经被关闭

记住应该在生产者的地方关闭channel，而不是消费的地方去关闭它，
这样容易引起panic


另外记住一点就是channel不像文件之类的，不惜要经常去关闭，只有当你确实
没有任何发送数据了，或你想显式的结束range循环之类的


select 

如果存在多个channel的时候，我们该如何操作，go里面提供了一个关键字select
通过select可以监听channel上数据流动

select 默认是阻塞的，只有当监听的channel中有发送或接收可以进行时
才会进行，当多个channel都准备好的时候，select是随机的选择一个执行的


在select 里面还有default语法，select其实就是switch的功能，
default就是当监听的channel都没有准备好的时候，
默认执行的(select不再阻塞等待channel)

select {
case i := <-c :
	//use i
default:
	//当c阻塞的时候执行这里
}


超时

有时候会出现goroutine阻塞的情况，那么我们如何避免整个程序进入
阻塞的情况？
我们可以利用select来设置超时，通过如下的方式来实现：


func main(){
	c := make(chan int)
	o := make(chan bool)
	go func(){
		for {
			select {
				case v := <- c:
					println(v)
				case <- time.After(5*time.Second):
					println("timeout")
					o <- true
					break
}
}}()
<-o
}


runtime goroutine

runtime包中有几个处理goroutine的函数

Goexit
	退出当前执行的gorouine,但是defer函数还会继续调用

Gosched

让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个
时候从该位置恢复执行。

NumCPU

返回CPU核数量

NumGorotine

返回正在执行和排队的任务总数

GOMAXPROCES

用来设置可以并行计算的CPU核数的最大值，并返回之前的值

web的工作方式

浏览器本身就是一个客户端，当输入url的时候，首先浏览器会去请求DNS服务器，
通过DNS获取相应的域名对应的IP,然后通过该IP地址找到IP对应的
服务器后，要求建立TCP连接，等浏览器发送完HTTP　Request(请求)包后，
服务器接收到请求包之后才开始处理请求包，服务器调用自身服务，返回HTTP　Response
(响应)包；客户端收到来自服务器的响应后开始开始渲染这个Response包的
主体(body),等收到全部的内容诉后断开与该服务器之间的TCP连接

一个web服务器也称为http服务器，它通过http协议与客户端通信。
这个客户端通常指的是web浏览器(其实手机端客户端内部也是浏览器实现的)


web服务器的工作原理：
１．客户机通过TCP/IP协议建立到服务器的TCP连接
２．　客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档
３．　服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容
，那么服务器会调用动态语言的解释引擎负责处理"动态内容"，
并将处理得到的数据返回给客户端
４．客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果


一个简单的http事务就是这样实现的，需要注意的是客户机与服务器之间的通信
是非持久连接的，也就是当服务器发送了应答后就与客户机断开连接，等待下一次请求


URL和DNS解析

我们浏览网页都是通过URL访问的，

URL(Uniform Resource Locator)是"统一资源定位符"的因为缩写
用于描述一个网络上的资源，基本格式如下


scheme://host[:port#]/path/.../[?query-string][#anchor]
scheme 指定底层使用的协议(例如:http,https,ftp)
host http服务器的IP地址或域名
port # http服务器的默认端口为80,在这种情况下端口号可以省略
path  访问资源的路径
query-string 发送给http服务器的数据
anchor 锚


DNS(Domain Name Syestem)是"域名系统"的英文缩写，是一种
组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络
它从事将主机名域名转换为实际IP地址的工作。
DNS就


更细的DNS解析，这个过程有助于我们理解DNS的工作模式

１．在浏览器中输入www.qq.com域名，操作系统会先自己本地的hosts文件
是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析

２．如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个
网址映射关系，如果有，直接返回，完成域名解析
３．如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先
会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，
此服务器收到查询时，如果查询的域名，包含在本地配置区域资源中，
则返回解析结果给客户机，完成域名解析，此解析具有权威性

４．如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已经缓存了
此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性

５．如果本地DNS服务器本地区域文件与缓存解析都失败，则根据本地DNS服务器、的设置
(是否设置转发器)进行查询，如果未用转发模式，本地DNS就把
请求发至"根DNS服务器"，"根DNS服务器"收到请求后会判断这个域名(.com)
是谁来授权管理，并返回一个负责该顶级域名服务器的一个IP.
本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。
这台服务器.com域的服务器收到请求后，如果自己无法解析，
它就会找一个管理.com域的下一级DNS服务器地址(qq.com)
给本地DNS服务器。当本地DNS服务器收到这个地址后，机会找qq.com
域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机

６．如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，
由上一级服务器进行解析，上一级服务器如果不能解析，
或找根DNS把转请求转至上上以及，以此循环。
不管本地DNS服务器用的是转发，还是根提示，最后都是把结果返回给本地
DNS服务器，由此DNS服务器再返回给客户机


所谓递归查询过程就是"查询的递交者"更替，而迭代查询过程则是"查询的递交者"不变


HTTP协议详解

HTTP协议是web工作的核心，所以要了解清楚web的工作方式就需要详细的
了解清楚HTTP是怎样工作的

http是一种让web服务器与浏览器(客户端)通过Internet发送与接收数据的
协议，它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求，
响应协议－－客户端发出一个请求，服务器响应这个请求。
在HTTP中，客户端总是通过建立一个连接与发送一个http请求
来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个
回调连接。客户端与服务器端都可以提前终端一个连接。
例如，当浏览器下载一个文件时，可以通过点击"停止"键来中断文件的
下载，关闭与服务器的http连接


http协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系的，
对http服务器来说，它并不知道这两个请求是否来自同一个客户端。
为了解决这个问题，web程序引入了cookie机制来维护连接的可持续状态


http协议是建立在tcp协议之上的，因此tcp攻击一样会影响http的通讯，例如
比如常见的一些攻击：syn　flood是当前最流行的dos(拒绝服务攻击)
与Ddos(分布式拒绝服务攻击)的方式之一，
这是一种利用TCP协议缺陷，发送大量伪造的tcp连接请求，从而使得被攻击
方资源耗尽(cpu满负荷或内存不足)的攻击方式


http请求包(浏览器信息)


Request包的结构，Request包为３部分，
第一部分叫做Request line(请求行)
第二部分叫做Request header(请求头)
第三部分叫做body (主体)


header和body之间有个空行

http协议定义了很多与服务器交互的请求方式，最基本的有４种，
分别为get,post,put,delete,
一个url地址用于描述一个网络上的资源，而http中的get,post,put,delete

就对应着这个资源的查，增，改，删４个操作

常用的是get和post

get一般用于获取/查询资源信息
post一般用于更新资源信息

get和post的区别


１．我们可以看到get请求消息体为空，post请求带有消息体
２．get提交的数据会放在url之后，以?分割url和传输数据，参数之间以&相连，
如EditPosts.aspx?name=test1&id=123456
post方法是把提交的数据放在http包的body中

３．get提交的数据大小有限制(因为浏览器对url的长度有限制)
而post方法提交的数据没有限制


４．get方式提交数据，会带来安全问题，比如一个登录页面，通过get方式提交
数据时，用户名和密码将出现在url上，如果页面可以被缓存或其他人可以访问这台
机器，就可以从历史记录获得该用户的账号与密码


http响应包(服务器信息)

状态行
服务器使用的web软件
发送时间
服务器发送信息的类型
表示发送http包是分段发的
保持连接状态
主体内容长度
消息体


Response包中的第一行叫做状态行，由http协议版本号，状态码，状态消息三部分组成

状态码用来告诉http客户端，http服务器是否产生了预期的Response.
http/1.1协议中定义了５类状态码，状态码由３位数字组成，第一个数字定义了
响应的类别

1xx　提示信息－表示请求已被成功接收，继续处理
2xx 成功-表示请求一进被成功接收，理解，接受
3xx 重定向－要完成请求必须进行更进一步的处理
4xx　客户端错误－请求有语法错误或请求无法实现
5xx  服务器端错误－服务器未能实现合法的请求


http协议是无状态和connection:keep-alive的区别

无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。
从另一方面来讲，打开一个服务器上的网页和


http是一个无状态的面向连接的协议，无状态不代表http不嗯给你保持tcp
连接，更不能代表http使用的是udp协议(面对无连接)

默认都开启了keep-alive保持连接特性，当一个网页打开完成后，客户端和服务器
之间用于传输http数据的tcp连接不会关闭，如果客户端再次访问这个服务器上的
网页，会继续使用这一条已经建立的tcp连接


keep-alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件(如apache)
中设置这个时间


请求实例

一次请求的request和response

上面这张图可以了解到整个的通讯过程，一个url请求但是左边栏里面为什么
会有那么多的资源请求(这些都是静态文件，go对于讲台文件有专门的处理方式)

第一次请求url,服务器端返回的是html页面，然后浏览器开始渲染html:
当解析到html　dom里面的图片连接，css脚本和js脚本的链接，浏览器
机会自动发起一个请求静态资源的http请求，获取相对应的静态资源，然后
浏览器机会渲染出来，最终将所有资源整合，渲染，完整展现在我们前面的屏幕上

网页优化方面有一项措施是减少http请求次数，就是把尽量多的css和js资源
合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时
减缓服务器的压力


go搭建一个web服务器


go语言里面提供了一个完善的net/http包，通过http包可以很方便
的搭建起来一个可以运行的webh服务。
同时使用这个包能很简单的对web的路由，静态文件，模板，cookie等数据进行
设置和操作
http包建立web服务器

服务器端的几个概念

１．Request:用户请求的信息，用来解析用户的请求信息，包括post,get,cookie,
url等信息

２．Response：服务器需要反馈给客户端的信息
3. Conn：用户的每次请求链接
4.　Handler:处理请求和生成返回信息的处理逻辑

分析http包运行机制


http包执行流程：

１．创建Listen Socket,监听指定的端口，等待客户请求到来

２．Listen Socket接受客户端的请求，得到Client　Socket，接下来
通过Client Socket 与客户端通信

3. 处理客户端的请求，首先从Client　Socket读取http请求的协议头，
如果是post方法，还可能要读取客户端提交的数据，然后交给相应的handler处理
请求，handler处理完毕准备好客户端需要的数据，通过Client　Socket写给客户端


go如何让web运行起来？

１．如何监听端口？
２．　如何接收客户端请求？
３．　如何分配handler?


go是通过一个函数ListenAndServe来处理这些事情的，
这个底层其实这样后处理的：初始化一个server对象，然后调用了
net.Listen("tcp",addr),
也就是底层用TCP协议搭建了一个服务，然后监控我们设置的端口

监听之后如何接收客户端的请求？调用了srv.Serve(net.Listener)函数，
这个函数就是处理接收客户端的请求信息。这个函数里面起了一个for{}
首先通过Listener接收秦秋，其次创建一个Conn,最后单独开了一个
goroutine，把这个请求的数据当做参数扔给这个conn去服务：go c.serve()

这个就是高并发的体现，用户的每一次都是在一个新的goroutine去服务，
相互不影响


那如何具体分配到相应的函数来后处理请求？

conn首先会解析request:c.readRequest(),然后获取相应的handler:handler :=
c.server.Handler,


一个http连接处理流程



