go语言特色

go语言被设计成一门应用于搭载web服务器，存储集群或类似用户的巨型中央服务器的系统编程语言

对于高性能分布式系统领域而言，go语言更有效率，它提供了海量并行的支持，
这对于游戏服务器开发很有利

go语言结构


go语言的基础组成部分有以下几部分：
1. 包声明  2. 引入包  3. 函数  4.变量
5. 语句& 表达式   6.  注释

1. package main 定义了包名
2. import "fmt" fmt包， fmt包实现了格式化IO(输入、输出)的函数
3. func main() 是程序开始执行的函数。
main函数是每一个可执行程序所必须包含的，一般来说都是在启动后
第一个执行的函数(如果有init()函数则会先执行该函数)

4. /**/ 是注释
5. fmt.Println() 可以将字符串输出到控制台

Print,Println这两个函数也支持使用变量，如，fmt.Println(arr)
如果没有特别指定，它们会一默认的打印格式将变量arr输出到控制台

6. 当标识符(包括常量，变量，类型，函数名，结构字段等)以一个大写字母开头
如 Group1,那么使用这种形式的标识符的对象就可以被外部包的代码所使用
(客户端程序需要先导入这个包)，这被称为导出(像面向对象语言中的public);
标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见
并且可用的(像面向对象语言中的protected)

需要注意的是 { 不能单独放在一行，所以以下代码在运行时会产生错误：

关于包

1. 文件名与包名没有直接关系，不一定要将文件名与包名定成同一个
2. 文件夹名与包名灭有直接关系，并非需要一致
3. 同一个文件夹下的文件只能有一个包名，否则编译报错


go 语言基础语法

go 标记


go程序可以由多个标记组成，可以是关键字，标识符，常量，字符串，符号。

分隔符

在go程序中，一行代表一个语句结束。每个语句不需要像c家族中的其他语言一样以
分号;结尾，因为这些工作都将由Go编译器自动完成



注释

注释不会被编译，每一个包都应该有相关注释


标识符

标识符是用来命名变量，类型等程序实体。一个标识符实际上就是一个
或多个字母(A-Z和a~z)数字(0~9),下划线_组成的序列，但是第一个字符
必须是字母或下划线而不能是数字

字符串连接

go语言的字符串可以通过+来实现

关键字


go语言数组

go语言提供了数组类型的数据结构

数组是具有相同唯一类型的组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型
例如整形，字符串或自定义类型
相对于去声明number0,number1,...,number99的变量，使用数组形式numbers[0],
numbers[1],...,numbers[99]更加方便且易于扩展

数组元素可以通过索引(位置)来读取(或修改)，索引从0开始，第一个元素索引为0，
第二个索引为1，以此类推


声明数组

go语言数组声明需要指定元素类型及元素个数

var variable_name [SIZE] variable_type

以上为一维数组的定义方式。例如以下定义了数组balance 长度为
10,类型为float32


var balance [10] float32

初始化数组

var balance = [5] float32{1000.0, 2.0,3.4,7.0,50.0}

初始化数组中{}的元素个数不能大于[]中的数字
如果忽略[]中的数字不设置数组大小，go语言会根据元素的
个数来设置数组的大小

var balance = [...]float32{1000.0,2.0,3.4,7.0,50}


虽然没有设置数组的大小

balance[4] = 50.0

以上读取了第五个元素。数组元素可以通过索引(位置)来读取(或修改)，
索引从0开始，第一个元素索引为0，第二个索引为1，以此类推


访问数组元素

数组元素可以通过索引(位置)来读取，格式为数组名后加中括号，
中括号中为索引的值。

var salary float32 =  balance[9]

数组完整操作(声明，赋值，访问)的实例

多维数组， go语言支持多维数组，最简单的多维数组是二维数组
向函数传递数组， 可以向函数传递数组参数


var threedim [6][6][6]int


二维数组是最简单的多维数组，二维数组本质上是由一维数组组成的。

var arrayName [x][y] variable_type

variable_type 为Go语言的数据类型，arrayName为数组名，二维数组可认为
是一个表格，x为行，y为列

二维数组中的元素可通过a[i][j]来访问

初始化二维数组

多维数组可通过大括号来初始值。


a = [3][4]int{
	{0,1,2,3},
	{4,5,6,7},
	{8,9,10,11},
}


访问二维数组

二维数组通过指定坐标来访问。如数组中的行索引与列索引，例如：

var := a[2][3]
var value int = a[2][3]


以上实例访问了二维数组val第三行的第四个元素
二维数组可以使用循环嵌套来输出元素

go语言向函数传递数组

如果你想向函数传递数组参数，需要在函数定义时，声明形参为数组，
我们可以通过以下两种方式来声明：

方式一

形参设定数组大小：

void myFunction(param [10]int){}

方式二

形参未设定数组大小


void myFunction(param []int){}


实例中函数接收整型数组参数，另一个参数指定了数组元素的个数，并返回平均值

使用的形参并未设定数组大小

浮点数计算输出有一定的偏差，也可以转整型来设置精度


go语言指针，
变量是一种使用方便的占位符，用于引用计算机内存地址
go语言的取地址符是&,放到一个变量钱使用就会返回相应变量的内存地址

指针，一个指针变量指向了一个值的内存地址

类似于变量和常量，在使用指针前需要声明指针，指针声明格式如下

var var_name *var-type

var-type为指针类型，var_name为指针变量名，*号用于指定变量是
作为一个指针，以下是有效的指针声明：

var ip *int //指向整型
var fp *float32 //指向浮点型

如何使用指针
指针使用流程：

1，定义指针变量
2，为指针变量赋值
3，访问指针变量中指向地址的值


在指针类型前面加上*号(前缀)来获取指针所指向的内容

go空指针

当一个指针被定义后没有分配到任何变量时，它的值为nil

nil指针也成为空指针
nil在概念上和其他语言的null,None,nil,NULL一样，
都指代零值或空值


一个指针变量通常缩写为ptr

空指针判断：

if(ptr != nil ) // ptr不是空指针
if(ptr == nil ) // ptr是空指针


go指针应用

go指针数组   可以定义一个指针数组来存储地址
go指向指针的指针  go支持指向指针的指针
go向函数传递指针参数   通过引用或地址传参，在函数调用时可以改变其值

定义了长度为3的整型数组

可能需要保存数组，这样我们就需要使用到指针

以下声明了整型指针数组：

var ptr [MAX]*int;

ptr为整型指针数组。因此每个元素都指向了一个值。
以下实例的三个整数将存储在指针数组中：

如果一个指针变量存放的又是另一个指针变量的地址，则称
这个指针变量为指向指针的指针变量


当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，
第二个指针存放变量的地址：

指向指针的指针变量声明格式如下：

var ptr **int;

以上指向指针的指针变量为整型
访问指向指针的指针变量值需要使用两个*号，

go语言允许向函数传递指针，只需要在函数定义的参数上设置为
指针类型即可。下面演示了如何向函数传递指针，并在函数调用
后修改函数内的值

go语言结构体

go语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的
数据类型。结构体是由一系列具有相同类型或不同类型的数据构成的数据集合

结构体表示一项记录，比如保存图书馆的书籍记录，每本书的属性


定义结构体

结构体定义需要使用type和struct语句。
struct语句定义了一个新的数据类型，结构体中有一个或多个成员。
type语句设定了结构体的名称

type struct_variable_type struct{
	member definition;
	...
	}


一旦定义了结构体类型，它就能用于变量的声明


variable_name := structure_variable_type{value1,value2,...}
或
variable_name := structure_variable_type {key1:value1,key2:value2,...}

访问结构体成员

如果要访问结构体成员，需要使用点号.操作符，

结构体.成员名


结构体类型变量使用struct关键字定义

结构体作为函数参数

可以像其他数据类型一样将结构体类型作为采纳数传递给函数。
并以以上实例的方式访问结构体变量


结构体指针


可以定义指向结构体的指针类似于其他指针变量

var struct_pointer *Books

以上定义的指针变量可以存储结构体变量的地址。
查看结构体变量地址，可以将&符号放置于结构体变量前


struct_pointer = &Book1;

使用结构体指针访问结构体成员，使用"."操作符：
struct_point.title;

接下来让我们使用结构体指针重写以上实例

struct类似于java中的类，可以在struct中定义成员变量
要访问成员变量，可以有两种方式：
1.通过struct变量.成员 变量



