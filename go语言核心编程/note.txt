
李文塔


go语言的三大特性：类型系统，接口和并发

go语言编程类型的图书类型

１．基础全面型

２．源码深入型

３．　专业领域型


第１章　基础知识

每种语言都有其独特的应用领域：
在嵌入式领域，汇编和c是首选
在操作系统领域，c是首选
在系统级服务器编程领域，c++是首选
在企业级应用程序和web应用领域，java是


１．１．１　go的诞生北京

(1) 摩尔定律接近失效后多核服务器已经成为主流，当前的编程语言对并发的支持不是很好，
不能很好地发挥多核CPU的威力。
(2) 程序越大，编译速度越慢
(3) 语言越来越复杂

并发，编译速度，编程复杂度

1.1.2 语言特性

语言组织
所有的高级语言都使用源代码来表达程序，主要包括


１．标识符和关键字
２．变量和常量
３．　运算符
４．表达式
５．　简单语句
６．　控制结构


类型系统

１．动静特性：动态语言还是静态语言
２．　类型强弱：强类型还是弱类型
３．　基本数据类型：包括类型及其支持的运算和操作集合
４．　自定义数据类型：包括类型及其支持的运算和操作集合

抽象特性

１．函数：是否支持函数，匿名函数，高阶函数，闭包等
２．　面向对象：是否支持面向对象
３．多态：如何支持多态
４．接口：是否支持接口，以及接口实现模式

元编程特性

１．泛型：是否支持泛型
２．　反射：是否支持反射，反射的能力

运行和跨平台语言特性

１．编译模式：是编译可执行程序，还是编译成中间代码，还是解释器解释执行
２．　运行模式：直接由OS加载运行，还是由虚拟机加载执行
３．　内存管理：是否支持垃圾回收
４．　并发支持：是否原生支持并发，还是库支持
５．交叉编译：是否支持交叉编译
６．　跨平台支持：是否支持多个皮糖

语言软实力特性
１．库：标准库和第三方库是否丰富，好用，高效
２．　框架：是否有出众的框架
３．语言自身兼容性：语言规范是否
４．语言的他影响力

go

支持顺序，循环，分支，静态语言，支持运行时动态类型
强类型，支持隐式类型推导，类型安全，支持type自定义
支持函数，类型组合支持面向对象，接口
Duck模型，通过接口支持

没有泛型支持，有反射支持
编译成可执行程序

直接运行，支持自动垃圾回收
协程(语言原生支持)，支持交叉编译，支持跨平台

应用领域：
云计算基础设施软件，中间件，区块链


将新知识与已经掌握的旧知识进行对比，
将新知识链接到旧知识里面，最终形成一个知识体系。

技能就是把已经掌握的抽象成解决问题的认知模型，这些
认知模型能够直到摸解决某个领域和相似领域的问题

main是可执行程序的包名，所有的go源程序文件头部必须有一个
包声明语句，go通过包来管理命名空间

import 引用一个头部包fmt,可以是标准库的包，也可以是第三方或自定义的
包，fmt是标准输入/输出包

func关键字声明定义一个函数，函数名为main,main代表go程序入口函数

fmt包里面的Printf函数，函数实参是一个字符串字面量，在标准输出
\n是一个转义符，表示换行

go源代码的特征

１．源程序以.go为后缀
2. 源程序默认为UTF-8编码
3. 标识符区分大小写
4. 语句结尾的分号可以省略
5. 函数以func开头，函数体开头的"{"　必须在函数头所在行尾部，不能单独起一行
６、　字符串字面量使用""""(双引号)括起来
7. 调用表里面的方法通过点"."访问符，比如示例中的fmt.Printf
8. main函数所在的包名必须是main


go build hello.go
./hello

1.3 go词法单元


现代高级语言的源程序内部的几个概念：
１．token
2.关键字
3. 标识符
4. 操作符
5. 分隔符
6. 字面量

1.3.1 token

token是构成源程序的基本不可再分割的单元。
编译器编译源程序的第一步就是将源程序分割为一个个独立的
token,这个过程就是词法分析。

go语言的token可以分为关键字，标识符，操作符，分隔符和字面量等


go的toke分隔符有两类：
１．操作符
２．自身没有特殊函数，仅用来分隔其他token,被称为纯分隔符


操作符：操作符就是一个天然的分隔符，同时其自身也是一个token,

sum := a+b

纯分隔符：其本身不具备任何语法含义，只作为其他token的分割
功能。博爱看空格，制表符，换行符和回车符，多个相邻的空格或
制表符会被编译器看作分隔符处理，比如 package main

这是一个包声明的语句，pakcage和main之间可以有任意多个
空格或制表符，go编译器会将其作为一个分隔符处理，最后
分离出来两个token:package 和main



1.3.2 标识符

go语言预声明的标识符包括关键字，内置数据类型标识符，常量值
标识符，内置函数和空白标识符。在写go源程序的过程中，
用户自定义标识符用在包名，函数名，自定义类型名，变量名和
常量名等


关键字

break default func interface select
case defer go map struct
chan else goto package switch
const fallthrough if range type
continue for import return var


１．引导程序整体结构的８个关键字


package //定义包名的关键字
import //导入包名关键字
const //　常量声明关键字
var //变量声明关键字
func //函数定义关键字
defer //延迟执行关键字
go // 并发语法糖关键字
return //函数返回关键字

2. 声明符合数据结构的４个关键字

struct //定义结构类型关键字
interface //定义接口类型类型关键字
map  //声明或创建map类型关键字
chan //声明或创建通道类型关键字

3. 控制程序结构的１３个关键字

if else // if else语句关键字
for range break continue //for循环使用的关键字
switch select type case default fallthrough // switch和select 语句使用的关键字

goto //goto跳转语句关键字

内置数据类型标识符(20个)

丰富的内置类型支持是高级语言的基本特性，基本类型也是构造用户自定义类型的基础。
为了标识符每种内置数据类型，go定义了一套预声明标识符，这些标识符用在变量或常量声明时，

内置数据类型标识符(20个)

数值(16个)
	整型(12个)
		byte int int8 int16 int32 int64
		uint uint8 uint16 uint32 uint64 uintptr
	浮点型(2个)
		float32 float64

	复数型(2个)
		complex64 complex128


字符和字符串型(2个)
string rune
接口型(1)
error


go是一种强类型静态编译型语言，在定义变量和常量时需要显式地指出数据类型，
go也支持自动类型推导，在声明初始化内置类型变量时，go可以自动地进行类型推导。
在定义新类型或函数时，必须显式地带上乐行标识符。

内置函数 １５个

make new len cap append copy delete panic recover close
complex real image Print Println


内置函数也是高级语言的一种语法糖，由于其是语言内置的，不需要用import 引入，内置函数
具有全局可见性。注意到其都是以小写字母开头的，但是并不影响其全局可用性。

常量值标识符(4个)
true false // true和false表示bool　类型的两常量值：真和假
iota  //用在连续的枚举的声明中
nil // 指针/引用型的变量的默认值就是nil


go的常量值标识代表的是一个常量值，这个常量值表达特殊的汉所以，
不好使用产量字面量直接表达时，就使用一个预先声明的标识符代替


空白标识符(1个)



空白标识符有特殊的汉所以，用来声明一个匿名的变量，该变量在赋值表达式的左端，空白标识符引用通常被用作
占位，比如忽略函数多个返回值中的一个和强制编译器做类型检查

１.3.3 操作符和分隔符
p27
